# Process this file with autoconf to produce a configure script.C
AC_INIT(rts2, 0.7.5, petr@kubanek.net)

AM_INIT_AUTOMAKE([gnu dist-bzip2])

AC_PREREQ(2.50)

AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET

# check for lang
AC_LANG_CPLUSPLUS

CFLAGS="-Wall -Wshadow -g"
AC_SUBST(CFLAGS)
CXXFLAGS="-Wall -Wshadow -g"
AC_SUBST(CXXFLAGS)

AC_CHECK_LIB([m], [sqrt], LIB_M="-lm";
LIBS="${LIBS} -lm"; AC_SUBST(LIB_M), [cat << EOF
**** You don't have math library.
**** Please install one and make sure, that it is available. 
EOF
exit 1])

AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, gethostbyname)

# Checks for library functions.
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_TYPE_SIGNAL
AC_FUNC_STRTOD
AC_CHECK_FUNCS([dup2 floor gethostbyname gettimeofday inet_ntoa memmove memset select socket strchr strdup strerror strtol bzero mkdir sqrt strcasecmp strncasecmp pow getaddrinfo getopt_long flock strtod isinf scandir alphasort])

AC_CHECK_HEADERS([limits.h]) 
AC_FUNC_CHOWN 
AC_FUNC_MEMCMP
AC_FUNC_SELECT_ARGTYPES 
AC_FUNC_STAT
AC_FUNC_STRFTIME 
AC_FUNC_VPRINTF 
AC_TYPE_MODE_T

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([argz.h arpa/inet.h dirent.h fcntl.h malloc.h netdb.h netinet/in.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h syslog.h termios.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_ARG_ENABLE(focusing,
[  --disable-focusing      disables focusing in camd (=>camd doesn't need cfitsio to build)],
[case "${enableval}" in
	yes) focusing=yes ;;
	no)  focusing=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-focusing) ;;
esac],[focusing=yes])

AM_CONDITIONAL(FOCUSING, test x$focusing = xyes)
B_A
AC_ARG_ENABLE(mirror,
[  --disable-mirror        disables mirror code in camd (=>camd is a bit smaller)],
[case "${enableval}" in
	yes) mirror=yes ;;
	no)  mirror=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-mirror) ;;
esac],[mirror=yes])

AM_CONDITIONAL(MIRROR, test x$mirror = xyes)

AC_ARG_WITH(x-focusc,
[  --without-x-focusc      disables xfocusc],
[case "${withval}" in
	yes) xfocusc=yes ;;
	no)  xfocusc=no ;;
	*) AC_MSG_ERROR(bad value ${enableval} for --enable-xfocusc) ;;
esac],[xfocusc=yes])

AM_CONDITIONAL(XFOCUSC, test x$xfocusc = xyes)

AC_ARG_WITH(libnova,
[  --with-libnova       path to libnova or "no" if libnova is not installed],
[case "${withval}" in
	yes) libnova=yes ;;
	no)  libnova=no ;;
	*) libnova=${withval} ;;
esac],[libnova=yes])

AM_CONDITIONAL(LIBNOVA, test x$libnova != xno)

AC_ARG_WITH(cfitsio,
[  --with-cfitsio       path to CFITSO library or "no" if cfitsio is not installed],
[case "${withval}" in
	yes) cfitsio=yes ;;
	no)  cfitsio=no ;;
	*) cfitsio=${withval} ;;
esac],[cfitsio=yes])

AM_CONDITIONAL(CFITSIO, test x$cfitsio != xno)

AC_ARG_WITH(ncurses,
[  --with-ncurses       path to ncurses library or "yes" if ncurses is in standard path],
[case "${withval}" in
	yes) ncurses=yes ;;
	*) ncurses=${withval} ;;
esac],[ncurses=yes])

dnl Check for GraphicsMagic++ library

AC_ARG_WITH(graphicsmagic,
[  --with-graphicsmagic    path to GraphicsMagic++ config or "no" if it is not installed],
[case "${withval}" in
	yes) graphicsmagic_config="GraphicsMagick++-config" ;;
	no)  graphicsmagic_config=no ;;
	*) graphicsmagic_config=${withval} ;;
esac],[graphicsmagic_config="GraphicsMagick++-config"])

AC_MSG_CHECKING(looking from GraphicsMagick++ library)
if ${graphicsmagic_config} --libs > /dev/null 2>&1
then
	GRAPHICSMAGICK_VERS=`${graphicsmagic_config} --version`
	AC_MSG_RESULT(${GRAPHICSMAGICK_VERS} found)
else
	GRAPHICSMAGICK_VERS="no"
	AC_MSG_RESULT(${graphicsmagic_config} not found)
	graphicsmagic_config="no"
fi

dnl Check for the XML library
AC_ARG_WITH(xml2,
[  --with-xml2             specify path for libxml2 config file],
[case "${withval}" in
	yes) XML_CONFIG=xml2-config ;;
	no) AC_MSG_ERROR(You really need to have libxml2-dev) ;;
	*) XML_CONFIG=${withval} ;;
esac],[XML_CONFIG=xml2-config])
AC_MSG_CHECKING(looking for xml2 library)
if ${XML_CONFIG} --libs print > /dev/null 2>&1
then
	XMLVERS=`${XML_CONFIG} --version`
	LIBXML_LIBS=`${XML_CONFIG} --libs`
	LIBXML_CFLAGS=`${XML_CONFIG} --cflags`
	AC_SUBST(LIBXML_LIBS)
	AC_SUBST(LIBXML_CFLAGS)
	AC_MSG_RESULT(${XMLVERS} found)
else
	AC_MSG_ERROR([Could not find ${XML_CONFIG} anywhere, apt-get install libxml2-dev or check ftp://xmlsoft.org/])
fi

AC_ARG_WITH(pgsql,
[  --without-pgsql         don't build pgsql dependent clients],
[case "${withval}" in
	yes) psql=yes ;;
	no)  psql=no ;;
	*) AC_MSG_ERROR(bad value ${withval} for --without-pgsql) ;;
esac],[psql=yes])

AC_ARG_WITH(wcs,
[  --with-libwcs           path to WCS programs],
[case "${withval}" in
	yes) libwcs=yes ;;
	no)  libwcs=no ;;
	*) libwcs=${withval} ;;
esac],[libwcs=yes])


# check for EPICS
AC_ARG_WITH(epics,
[  --with-epics 	path to EPICS library, build epics dependent binaries],
[case "${withval}" in
	yes) epics=yes ;;
	no)  epics=no ;;
	*) epics=${withval} ;;
esac],[epics=no])

AM_CONDITIONAL(EPICS, test x$epics != xno)

AC_ARG_WITH(sbig,
[  --with-sbig             path to SBIG USB CCD driver, build SBIG USB CCD driver],
SBIG="${withval}";
LIB_SBIG="-L${SBIG} -lsbigudrv $SBIG/csbigcam.o $SBIG/csbigimg.o";
INC_SBIG="-I${SBIG}",
[SBIG=no])

AM_CONDITIONAL(SBIG, test x$SBIG != xno)
AC_SUBST(SBIG)
AC_SUBST(LIB_SBIG)
AC_SUBST(INC_SBIG)

AC_ARG_WITH(andor,
[  --with-andor            path to Andor CCD driver, build Andor CCD driver],
ANDOR="${withval}";
LIB_ANDOR="-landor",
[ANDOR=no])

AM_CONDITIONAL(ANDOR, test x$ANDOR != xno)
AC_SUBST(ANDOR)
AC_SUBST(LIB_ANDOR)
AC_SUBST(INC_ANDOR)

# test for EDT PDV boards
AC_ARG_WITH(edtpdv,
[  --with-edtpdv           path to EDT-PDV SDK files, needed to build EDT cameras (http://www.edt.com/software],
EDTPDV="${withval}";
LIB_EDTPDV="-L${EDTPDV} -lpdv -ldl";
INC_EDTPDV="-I${EDTPDV}",
[EDTPDV=no])

AM_CONDITIONAL(EDTPDV, test x$EDTPDV != xno)
AC_SUBST(EDTPDV)
AC_SUBST(LIB_EDTPDV)
AC_SUBST(INC_EDTPDV)

# for Alta we need special library:(
AC_ARG_WITH(alta,
[  --with-alta             path to Apogee Alta CCD driver, build Apogee Alta CCD driver],
# checks for libusb-config
AC_CHECK_PROG(LIBUSB_CONFIG, libusb-config, yes, no)
if test "$LIBUSB_CONFIG" = "yes"; then
  LIBUSB_LDFLAGS=`libusb-config --libs`
  LIBUSB_CFLAGS=`libusb-config --cflags`
  LIBUSB_VERSION=`libusb-config --version`
else
  AC_MSG_ERROR([libusb not found!])
fi
ALTA="${withval}";
LIB_ALTA="${ALTA}/apogee_USB.so ${LIBUSB_LDFLAGS}";
INC_ALTA="-I${ALTA} -I${ALTA}/FpgaRegs ${LIBUSB_CFLAGS}",
[ALTA=no])

AM_CONDITIONAL(ALTA, test x$ALTA != xno)
AC_SUBST(ALTA)
AC_SUBST(LIB_ALTA)
AC_SUBST(INC_ALTA)

# FLI..
AC_ARG_WITH(fli,
[  --with-fli             path to libfli CCD driver, build FLI CCD driver],
FLI="${withval}";
LIB_FLI="-L${FLI} -lfli";
INC_FLI="-I${FLI}",
[FLI=no])

AM_CONDITIONAL(FLI, test x$FLI != xno)
AC_SUBST(FLI)
AC_SUBST(LIB_FLI)
AC_SUBST(INC_FLI)

# check for COMEDI
AC_ARG_WITH(comedi,
[  --with-comedi	path to COMEDI library, build comedi dependent binaries],
COMEDI="${withval}";
LIB_COMEDI="-lcomedi";
if [ "x${withval}" != "xyes" ]; then INC_COMEDI="-I${withval}"; else INC_COMEDI=""; fi,
[COMEDI=no])

AM_CONDITIONAL(COMEDI, test x$COMEDI != xno)
AC_SUBST(COMEDI)
AC_SUBST(LIB_COMEDI)
AC_SUBST(INC_COMEDI)

# check for paramount library 
AC_ARG_WITH(paralib,
[  --with-paralib          path to Paramount library, build Paramount driver],
PARALIB="${withval}";
LIB_PARA="${PARALIB}/libmks3.o";
INC_PARA="-I${PARALIB}",
[PARALIB=no])

AM_CONDITIONAL(PARALIB, test x$PARALIB != xno)
AC_SUBST(PARALIB)
AC_SUBST(LIB_PARA)
AC_SUBST(INC_PARA)

AC_ARG_WITH(mdm,
[  --with-mdm              path to MDM (Kitt Peak, Arizona) TCS library, build MDM driver],
MDMTCS="${withval}";
LIB_MDMTCS="${MDMTCS}/libtcs.a"
INC_MDMTCS="-I${MDMTCS}",
[MDMTCS=no])

AM_CONDITIONAL(MDMTCS, test x$MDMTCS != xno)
AC_SUBST(MDMTCS)
AC_SUBST(LIB_MDMTCS)
AC_SUBST(INC_MDMTCS)

# check for PCI8255
AC_ARG_WITH(pci8255,
[  --with-pic8255          path to PCI8255 sources, build Dublin dome],
PCI8255="${withval}";
LIB_PCI8255="-L${PCI8255}";
INC_PCI8255="-I${PCI8255}",
[PCI8255=no])

AM_CONDITIONAL(PCI8255, test x$PCI8255 != xno)
AC_SUBST(PCI8255)
AC_SUBST(LIB_PCI8255)
AC_SUBST(INC_PCI8255)

# check for GPIB
AC_ARG_WITH(gpib,
[  --with-gpib             build with support for GPIB devices],
GPIBLIB="${withval}";
LIB_GPIB="-lgpib",
[GPIBLIB=no])

if test "x$GPIBLIB" != "xno" ; then
  AC_CHECK_HEADERS([gpib/ib.h])
fi

AM_CONDITIONAL(GPIBLIB, test x$GPIBLIB != xno)
AC_SUBST(GPIBLIB)
AC_SUBST(LIB_GPIB)

# Check for A3200
AC_ARG_WITH(a3200,
[  --with-a3200           path for A3200 SDK],
A3200="${withval}";
LIB_A3200="${withval}/Lib/A32Cmplr.lib ${withval}/Lib/A32Sys.lib";
INC_A3200="-I${withval}/Include",
[A3200=no])

AM_CONDITIONAL(A3200, test x$A3200 != xno)
AC_SUBST(A3200)
AC_SUBST(LIB_A3200)
AC_SUBST(INC_A3200)
  
# Define lock file prefix
AC_ARG_WITH(lock,
[  --with-lock             specify lock file path prefix, default to /var/run/rts2_],
LOCK_PREFIX="${withval}",
LOCK_PREFIX="/var/run/rts2_")

AH_TEMPLATE([LOCK_PREFIX],[Lock file prefix path])

AC_DEFINE_UNQUOTED(LOCK_PREFIX, "$LOCK_PREFIX", [Lock file prefix path])

# Default centrald port
AC_ARG_WITH(port,
[  --with-port             default centrald port. If this value is not specified, 617 is used],
CENTRALD_PORT="${withval}",
CENTRALD_PORT="617")

AH_TEMPLATE([CENTRALD_PORT],[Default centrald port])

AC_DEFINE_UNQUOTED(CENTRALD_PORT, "$CENTRALD_PORT", [Default centrald port])


# Checks for libraries.

if test "x${cfitsio}" != "xno"; then
  if test "x${cfitsio}" != "xyes"; then
    LDFLAGS="${LDFLAGS} -L${cfitsio}"
  fi
  AC_CHECK_LIB([cfitsio], [ffinit], LIB_CFITSIO="-lcfitsio"; 
, [cat <<EOF
**** You don't have cfitsio installed.
**** Please download one from 
**** http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html
EOF
exit 1])
  if test "x${cfitsio}" != "xyes"; then
    LIB_CFITSIO="-L${cfitsio} ${LIB_CFITSIO}"
    CFITSIO_CFLAGS="-I${cfitsio}"
  else
    CFITSIO_CFLAGS=""
  fi
  AC_SUBST(CFITSIO_CFLAGS)
  AC_SUBST(LIB_CFITSIO)
fi

if test "x${libwcs}" != "xno"; then
  if test "x${libwcs}" != "xyes"; then
    LDFLAGS="${LDFLAGS} -L${libwcs}/libwcs"
  fi
  AC_CHECK_LIB([wcs], [wcs2pix], LIBWCS_LDFLAGS="-lwcs", 
  [cat <<EOF
**** You don't have libwcs installed.
**** You can download one from
**** http://tdc-www.harvard.edu/software/wcstools/.
**** Please note that there is no standart procedure to install
**** that library. Please see INSTALL file for instructions how to install
**** WCS library.
EOF
  exit 1])
  if test "x${libwcs}" != "xyes"; then
    LIBWCS_LDFLAGS="-L${libwcs}/libwcs -lwcs"
    LIBWCS_CFLAGS="-I${libwcs}"
  else
    LIBWCS_LDFLAGS="-lwcs"
  fi
fi

AM_CONDITIONAL(LIBWCS, test x$libwcs != xno)
AC_SUBST(LIBWCS_CFLAGS)
AC_SUBST(LIBWCS_LDFLAGS)

if test "x${ncurses}" != "xyes"; then
  LDFLAGS="${LDFLAGS} -L${ncurses}/lib"
fi     

AC_CHECK_LIB([ncurses], [mvwprintw], LIBNCURSES_LDFLAGS="-lncurses";
AC_SUBST(LIB_NCURSES), [cat << EOF
**** You don't have ncurser libraries.
**** Please install ncursers (you need devel package as well)
EOF
exit 1])

if test "x${ncurses}" != "xyes"; then
  LIBNCURSES_CFLAGS="-I${ncurses}/include"
  LIBNCURSES_LDFLAGS="-L${ncurses}/lib -lncurses"
fi

AC_SUBST(LIBNCURSES_CFLAGS)
AC_SUBST(LIBNCURSES_LDFLAGS)

if test "x${libnova}" != "xno"; then
  if test "x${libnova}" != "xyes"; then
    LDFLAGS="${LDFLAGS} -L${libnova}/lib"
  fi
  AC_CHECK_LIB([nova], [ln_get_version], LIB_NOVA="-lnova", 
[cat << EOF
**** You don't have libnova library version >= 0.10.
**** Please get one from http://libnova.sourceforge.net.
EOF
  exit 1])
  if test "x${libnova}" != "xyes"; then
    LIB_NOVA="-L${libnova}/lib ${LIB_NOVA}"
    NOVA_CFLAGS="-I${libnova}/include"
  else
    NOVA_CFLAGS=""
  fi
  AC_SUBST(LIB_NOVA)
  AC_SUBST(NOVA_CFLAGS)
fi  

AC_CHECK_LIB([pthread], [pthread_exit], LIB_PTHREAD="-lpthread";
AC_SUBST(LIB_PTHREAD), [cat << EOF
**** You don't have pthread library installed.
**** Please try to get it somewhere.
EOF
exit 1])


AH_TEMPLATE([HAVE_DECL_LN_GET_HELIOCENTRIC_TIME_DIFF],[If Libnova provides ln_get_heliocentric_time_diff function])

AC_CHECK_DECL(ln_get_heliocentric_time_diff, , ,[#include <libnova/libnova.h>])
if test "x"$ac_cv_have_decl_ln_get_heliocentric_time_diff = "xyes"; then
	AC_DEFINE_UNQUOTED(HAVE_DECL_LN_GET_HELIOCENTRIC_TIME_DIFF, 1, [If Libnova provides ln_get_heliocentric_time_diff function])
fi

if test "x"$xfocusc = "xyes"; then
	AC_PATH_XTRA
	AC_SUBST([RTS2_XFOCUSC], ['rts2-xfocusc${EXEEXT}'])
fi

AH_TEMPLATE([HAVE_LIBJPEG],[Whenever JPEG is installed])

if test "x${graphicsmagic_config}" != "xno"; then
  LIB_JPEG=`${graphicsmagic_config} --libs`
  JPEG_CFLAGS=`${graphicsmagic_config} --cppflags`
  AC_DEFINE_UNQUOTED(HAVE_LIBJPEG,1,[Whenever JPEG is installed])
else
  LIB_JPEG=""
  JPEG_CFLAGS=""
  AC_DEFINE_UNQUOTED(HAVE_LIBJPEG,0,[Whenever JPEG is installed])
fi
AC_SUBST(LIB_JPEG)
AC_SUBST(JPEG_CFLAGS)

AM_CONDITIONAL(GRAPHICSMAGICK, test x$graphicsmagic_config != xno)

if test "x$COMEDI" != "xno"; then
	AC_CHECK_LIB([comedi], [comedi_open], LIB_COMEDI="-lcomedi";
	AC_SUBST(LIB_COMEDI), [cat << EOF
**** You don't have comedi library installed.
**** Please download it from http://www.comedi.org
EOF
	exit 1])
fi

if test "x$epics" != "xno"; then
  	if test "x$epics" != "xyes"; then
		if test "x$EPICS_HOST_ARCH" = "x"; then
		  	cat << EOF
**** Please define EPICS_HOST_ARCH varible. It content should be same as
**** the variable you used when you build EPICS library.
EOF
			exit 1
		fi
		LDFLAGS="${LDFLAGS} -L${epics}/lib/${EPICS_HOST_ARCH}"
		LIB_EPICS="-L${epics}/lib/${EPICS_HOST_ARCH}"
		if echo $EPICS_HOST_ARCH | grep ^linux; then
			INC_EPICS="-I${epics}/include -I${epics}/include/os/Linux"
		else
		if echo $EPICS_HOST_ARCH | grep ^solaris; then
			INC_EPICS="-I${epics}/include -I${epics}/include/os/solaris"
		else
		  	echo "**** Unsupported EPICS_HOST_ARCH argument ${EPICS_HOST_ARCH}"
			exit 1
		fi
		fi
	else
		LIB_EPICS=""
		INC_EPICS=""
	fi
	AC_CHECK_LIB([ca], [ca_context_create],
	LIB_EPICS="-lca ${LIB_EPICS}",
	[cat << EOF
**** You don't have epics library installed.
**** Please try to get it from http://www.aps.anl.gov/epics
EOF
	exit 1])

	AC_SUBST(LIB_EPICS)
	AC_SUBST(INC_EPICS)
fi

AC_MSG_CHECKING(for date)
DATE=`date +%Y-%m-%d`
if test "z"$DATE = "z" ; then
	AC_MSG_RESULT(none found)
	DATE="unknow"
else
	AC_MSG_RESULT($DATE)
fi

LDADD = ""
AC_SUBST(LDADD)
AC_SUBST(LDFLAGS)

AC_SUBST(DATE)

debug=""
AC_SUBST(debug)

AH_TEMPLATE([HAVE_PGSQL],[Whenever PGSQL is installed])
AH_TEMPLATE([HAVE_PGSQL_8], [If PGSQL version is 8 or higher])
AH_TEMPLATE([HAVE_PGSQL_SET_VARSIZE], [If PGSQL provides SET_VARSIZE function])

if test "x"$psql = xyes ; then
  AC_POSTGRESQL
  AC_ECPG

  PG_MAJOR=`pg_config --version | sed 's/PostgreSQL //' | sed 's/\..*$//'`
  PG_MINOR=`pg_config --version | sed 's/PostgreSQL [[0-9]]\.//' | sed 's/\..*$//'`

  AC_DEFINE_UNQUOTED(HAVE_PGSQL, 1, [Whenever PGSQL is installed])

  if test $PG_MAJOR -gt 7 ; then
    AC_DEFINE_UNQUOTED(HAVE_PGSQL_8, 1, [If PGSQL version is 8 or higher])
  fi
  if test $PG_MAJOR -gt 8; then
    AC_DEFINE_UNQUOTED(HAVE_PGSQL_SET_VARSIZE, 1, [If PGSQL provides SET_VARSIZE function])
  fi
  if test $PG_MAJOR -eq 8 -a $PG_MINOR -gt 2; then
    AC_DEFINE_UNQUOTED(HAVE_PGSQL_SET_VARSIZE, 1, [If PGSQL provides SET_VARSIZE function])
  fi
fi

AM_CONDITIONAL(PGSQL, test x$psql = xyes)

# Check for gsoap
AC_GSOAP

AH_TEMPLATE([HAVE_PGSQL_SOAP],[Whenever PGSQL and SOAP libraries are installed])

AM_CONDITIONAL(PGSQL_SOAP, test x$psql = xyes -a x$gsoap = xyes )

if test x$psql = xyes -a x$gsoap = xyes ; then 
  AC_DEFINE_UNQUOTED(HAVE_PGSQL_SOAP, 1, [Whenever PGSQL and SOAP libraries are installed])
fi

AC_CONFIG_SRCDIR(src)
AC_CONFIG_HEADER(include/config.h)

AM_CONDITIONAL(NOT_GETADDRINFO, test x${ac_cv_func_getaddrinfo} = xno)
AM_CONDITIONAL(NOT_GETOPT_LONG, test x${ac_cv_func_getopt_long} = xno)

AC_OUTPUT([Makefile
	   man/Makefile
	   include/Makefile
	   conf/Makefile
	   conf/event.d/Makefile
	   doc/Makefile
	   doc/doxyfile
	   scripts/Makefile
	   src/Makefile
	   src/bckimages/Makefile
	   src/camd/Makefile
	   src/camd/urvc2/Makefile
	   src/camd/apogee/Makefile
	   src/camd/edtsao/Makefile
	   src/dome/Makefile
	   src/dome/zelio/Makefile
	   src/indi/Makefile
	   src/libindi/Makefile
	   src/filterd/Makefile
	   src/focusc/Makefile
	   src/focusd/Makefile
	   src/grb/Makefile
	   src/mirror/Makefile
	   src/monitor/Makefile
	   src/plan/Makefile
	   src/sql/Makefile
	   src/sql/auger/Makefile
	   src/sql/create/Makefile
	   src/sql/drop/Makefile
	   src/sql/update/Makefile
	   src/sql/telma/Makefile
	   src/pgsql/Makefile
	   src/phot/Makefile
	   src/serverd/Makefile
	   src/teld/Makefile
	   src/teld/model/Makefile
	   src/utils/Makefile
           src/wcs/Makefile
	   src/writers/Makefile
	   src/utilsdb/Makefile
	   src/db/Makefile
	   src/db/simbad/Makefile
	   src/soap/Makefile
	   src/sensord/Makefile
	   src/logger/Makefile
	   src/xmlrpc/Makefile
	   src/xmlrpc/xmlrpc++/Makefile
	   src/scheduler/Makefile]
)

echo "
***************************************
 RTS2 build configuration 

  focusing      ${focusing}
  mirror        ${mirror}
  xfocusc       ${xfocusc}
  psql          ${psql}
  libnova       ${libnova}
  cfitsio       ${cfitsio}
  libwcs        ${libwcs}
  pgsql		${psql}
  gsoap         ${gsoap}
  gpib          ${GPIBLIB}
  comedilib     ${COMEDI}
  epics         ${epics}
  libxml2       ${XMLVERS}
  graphicsmagic ${GRAPHICSMAGICK_VERS}


CCD's:
  sbig          ${SBIG}
  andor         ${ANDOR}
  edtsao        ${EDTPDV}
  alta          ${ALTA}
  fli           ${FLI}

MOUNT's:
  paralib       ${PARALIB}
  mdmtcs        ${MDMTCS}

DOME's:
  PCI8255       ${PCI8255}

SENSOR's:
  A3200         ${A3200}

  lock prefix   ${LOCK_PREFIX}
  centrald port	${CENTRALD_PORT}

***************************************

Now type 'make' followed by 'make install'
to install rts2 package.

Please note, that you should do 'make clean'
if you change any configuration option.

"
