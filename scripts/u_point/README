Prerequisites
=============
 python3(.5)
 # Ubuntu 16.04:
 apt install  python3-watchdog (maybe disappears)
              python3-pyinotify	(has all events)
              python3-requests
	      python3-pandas  
              yale # bright star catalog
	           # http://tdc-www.harvard.edu/catalogs/bsc5.html
	      libnova-dev
	      telnet
	      saods9
	      
 pip3 install astropy (1.2.1 or newer)
              numpy
	      scipy
	      matplotlib
              pyds9
	      pyfits
	      pyephem
	      
 libnova needs to be on LD_PATH as libnova.so

 Do a:
 wget http://maia.usno.navy.mil/ser7/finals2000A.all  

 astrometry.net:
 For the default CCD pixel size (862,655 or 24.4x18.56 arcmin2)
 chose packages:
 
  astrometry-data-2mass-05 (11'-16')
  astrometry-data-2mass-06 (16'-22')
  astrometry-data-2mass-07 (22'-30')

Use cases
=========

u_point's use cases are:

- unattended data acquisition and analysis done
  with astrometry.net. In this case do not use
  results from SExtractor (see u_point.py).

- a CCD FoV which is too small for astrometry.net
  or similar to work reliably.
  As targets serve "lonely" objects from Yale's
  Bright Star Catalog which are identified as
  brightest object on an CCD image.
  SExtractor will select the brightest star which
  serves as the measured mount apparent location.

- u_point is written in a way, that libindi or
  ASCOM users can easily extend u_point (see
  devices.py or contact wildi.markus@bluewin.ch)

For quick introduction see section: Very quick
tour: do_it_all_dss.sh
This script performs a full acquisition, position
analysis and fit a pointing model. Progress and results
are plotted.


Welcome to users of libindi, ASCOM or any other system
======================================================

98% of the code is independent of any specific system,
like RTS2, libindi or ASCOM.

Python lives on many OSs and architectures, hence
using u_point with a diffrent combination is likely
to work, or very soon.

libnova, astropy, PyEphem, Toshimi Taki
=======================================

At the moment it is still unclear where the
differences between libnova and astropy stems
from.
In order to simplify sorting out these difference
there are several 'transformers' available

 ./u_analyze.py  --transform-with-class TRANSFORM

where TRANSFORM is one of f the following options

 transform_libnova
 transform_astropy
 transform_pyephem
 (transform_taki_san)

TRANSFORM is loaded at run time.

Model selection
===============

There are several optimization models available:

 u_point.py --model-class MODEL

where MODEL is one of the following options

 model_altaz

for AltAz and for HA/Dec

 model_buie
 model_u_point

Like TRANSFORM, MODEL is loaded at run time.

SExtractor versus astrometry.net
================================

When ever possible use astrometry.net (default)
and not SExtractor. u_point.py uses per default
results from astrometry.net, but --fit-sextr can
be specified to obtain those results.

Coordinates
===========

E.g. RTS2 provides corrections for (see libnova)

 precession
 nutation
 aberration
 refraction

and can be considered as "apparent" coordinates as
long as the resulting pointing error is greater than
1 arcsec. Libnova's calculation of refraction needs
to be revisited. If a mount controller does not
provide these corrections the coordinates set at
mount must be calculated and set.

The catalog data (ICRS), labeled as cat_ic, are transformed
to apparent/observed, either AltAz (cat_aa) or HA,Dec (cat_ha).

Coordinates read back from the mount are labeled as mnt_ci
(RA,Dec), mnt_ha (HA,Dec) or mnt_aa (AltAz), in frames
EQ/RA, EQ/HA or AltAz. Usually values of ICRS coordinates
are set at the mount.

The coordinates exist in u_point source code as follows:

Grid positions:
---------------
nml_ic: nominal position ICRS, it is almost ICRS since
        refraction is not corrected. But any value
	is ok because nml_ic is copied to cat_ic: this
	is the starting point.
	
nml_aa: nominal position AltAz

Catalog positions:
------------------
cat_ic: catalog position ICRS, RA,Dec
cat_ha: apparent position HA/Dec
cat_aa: apparent position AltAz 

cat_ra_ap: apparent position RA,Dec
cat_az_ap: apparent position AltAz

Mount positions:
----------------	
mnt_ap_set: input to the mount, values from cat_ap
mnt_ra_rdb: read back from the mount

mnt_ha_clc: HA,Dec calculated from cat_ap
mnt_aa_rdb: AltAz read back from mount
 
observed mount position:
mnt_ll_sxtr: RA,Dec or AltAz, derived from SExtractor 
mnt_ll_astr: RA,Dec or AltAz, derived from astrometry.net

Measurement and Optimization
============================

Coordinates cat_ic are transformed to apparent AltAz
cat_aa or to apparent HA,Dec cat_ha. In both
cases refraction is included if meteo data is available.

cat_ap is set at the mount (mnt_ap_set), assuming the
mount controller does not applay any corrections. The
differences

 d_az  = cat_az_ap.az -  X.az
 d_alt = cat_az_ap.alt - X.alt

where X is either mnt_ll_sxtr or mnt_ll_astr, resp.

 d_ha  = cat_ha_ap.ha - X.ha
 d_dec = cat_ha_ap.dec - X.dec

are minimized simultaneously. 

Apparent coordinates
====================

According to http://www.iausofa.org/publications/sofa_pn.pdf
the following steps are between ICRS and apparent/observed AltAz:
 step                                              target system
 space motion                                      BCRS
 prallax (0".8)                                    astrometric RA,Dec
 light deflection (<0".003,dist sun>15deg)
 and aberration                                    GCRS
  a) frame bias, equinox based precession-nutation geocentric apparent
  b) frame bias, CIO based precession-nutation     CIRS
  a) Greenwich apparent sidereal time              TIRS
  b) Earth rotation angle                          TIRS
 polar motion (0".1)                               ITRS
 longitude                                         loacal apparent HA,Dec
 diurnal aberration (0".3), paralax                topocentric HA,Dec
 latitude                                          topocentric Az,Alt
 refraction                                        observed Az,Alt
And in addition 
 latitude                                          observed HA,Dec


Very quick tour: do_it_all_dss.sh
=================================
NOTE: do_it_all_dss.sh is solely used for demonstration.

Script do_it_all_dss.sh needs only optionally a running
installation of RTS2 and after the above mentioned packages
have been installed, it is ready to use.

 cd $HOME/rts2/scripts
 ./do_it_all_dss.sh

If astrometry.net should be used, start with
option '-a'

 ./do_it_all_dss.sh -a

Although u_analysis.py uses all but one CPUs, it is slower
even if search radius, pixel scale and image center are
specified. do_it_all_dss.sh limits the execution time to
30 sec.

This script performs all necessary steps to get
a pointing model fit. Steps:

1) selecting objects from Yale Bright Star Catalog
visible at observatory's latitude.

2) creating a grid of nominal AltAz positions

3) for every grid positions acquire  an image from DSS

4) analyzing the obtained images with SExtractor
(optionally with astrometry.net).

5) performing the fit of the catalog and mount
positions, finally plot the results.

The script provides additional information and
comments about how to use these u_* scripts.

do_it_all_dss.sh fetches images from DSS if
option --fetch-dss-image is specified and the
mount device is purely software (see devices.py).

To use RTS2 without a real mount, use it's dummy
devices.

Remove in /etc/rts2/devices all but

  camd    dummy   C0      --width 862 --height 655 --frame-transfer --localhost localhost
  teld    dummy   T0      --move fast --localhost localhost
  # optionally let T0 run at 2deg/sec:
  #teld    dummy   T0      --localhost localhost

start RTS2 and then start

 ./do_it_all_dss.sh -r

Being able to communicate with RTS2 the scripts are
started differently:

 acq_script="$HOME/rts2/scripts/u_point/u_acquire_fetch_dss_continuous.sh"
 rts2-scriptexec -d C0 -s " exe $acq_script "

where u_acquire_fetch_dss_continuous.sh is a
(bash) script executing u_acquire.py. The same
thing if a progress plot is displayed:

 plt_script="$HOME/rts2/scripts/u_point/u_acquire_plot.sh"
 rts2-scriptexec -d C0 -s " exe $plt_script" 

NOTE: if u_acquire.py is executed through rts2-scriptexec
log information is only available with command

 tail -f /tmp/u_acquire.log

Read the --help texts for more options.

NOTE: if you are using do_it_all_dss.sh may be there are
processes hanging around in the background, do

 ps aux | grep python3
 killall python3

if no other python3 process is hit but u_point.

Advanced quick tour: something went bad
=======================================
Cases:

- real mount crashed
- bad measurements
- statistical outliers
- ...
No problem as long as the data in the base path
is available. u_acquire.py and u_analyze.py check 
the relevant files and continue there where they
got stuck.

Once the analysis is complete and the plot windows
labeled "progress..." are still open. Arrange them
on screen that both are visible side by side.

Deleting acquired positions on progress plots
---------------------------------------------
Options --animate and --delte have to specified to
watch the following behavior.

Choose plot "analyzed positions" and click on a
data point. The annotation appers and DS9 will
open and display the FITS image. Then press <Delete>
on the keyboard. The blue data point disappears
indicating that this position has been deleted. The
red or ev. yellow dot represent an analysis (SExtractor,
astrometry.net) and remain.

If there are to many annotations on the plot, press
<c> to clear them.

On plot "acquired positions" the same thing happened
the nominal position is shown in red indicating that
the measurement was deleted if removed on plot
"analyzed positions".

Deleting measurements is available on plot "acquired 
positions" too, updating plot "analyzed positions"
(takes some time). With this feature an efficient
cleaning of the data is possible.

Having deleted several acquired data points, how
about a redo of the data acquisition. u_acquire.py
and u_analysis.py can be interrupted at any time.

Close all open matplotlib windows

 killall python3 # if appropriate

and restart the process with argument '-p':

 ./do_it_all_dss.sh -p

In this case the data in base path, usually /tmp/u_point,
is not deleted.

Again u_acquire.py tries to make measurements on all
missing locations (red on plot acquired positions). 
u_analysis.py completes as well the missing points.

This scenario is very likely to happen. Using a real
telescope, u_acquire.py may fail for many reasons.
Just restart the process.


Deleting analyzed positions on u_point.py plots
-----------------------------------------------
Once the analysis has been finished the u_point.py
result plots are displayed.

Click a point and it's annotation appears as well as
on all other plots. This feature allows a quick
identification of interesting or bad measurements.
Those analyzed positions can be dropped from the file

 analyzed_positions.anl

by hitting key <Delete>.

Having cleaned the data restart u_point.py with
e.g.

 ./u_point.py --base-path /tmp/u_point\
 --plot  --ds9-display --delete --toconsole

to see the effect.

If there are to many annotations on the plot, press
<c> to clear them.

NOTE: if the CPUs are loaded the annotations do not
make it to the plot, nevertheless DS9 is updated. In
these cases start the scripts with option --toconsole
and see the annotations on the console.

Scripts
=======
Only scripts named u_*.py are interesting from a
user's perspective. All other are part of the
supporting infrastructure.

u_point is a silent system with sensible default
values with exception of

 --obs-longitude (all)
 --obs-latitude  (all)
 --obs-height    (all)
 --pixel-scale   (u_acquire.py,u_analyze.py)
 --ccd-size      (u_acquire.py,u_analyze.py)
 --ccd-angle     (u_acquire.py,u_analyze.py)

The last three options need only be specified
if SExtractor is used (see u_point.py). 

 --use-bright-stars (u_acquire.py)
 --fetch-dss-image  (u_acquire.py)
 --device-class     (u_acquire.py)
 --meteo-class      (u_acquire.py)

If option --use-bright-stars is specified then
the nearest Yale Bright Star Catalog is selected
as target. The default, suitable for any reasonable
telescope/mount configuration, uses the nominal
grid positions to take an FITS image.

If --fetch-dss-image is specified images are
always fetched from DSS (see devices.py) even

 --device-class DeviceRts2

is specified. Default of option --meteo-class
is the dummy meteo device. Most likely you
want to write your own.

Options

 --animate
 --delete
 --ds9_display
 
modifying --plot are disabled be default.

Common features
---------------
All scripts read and write best to a common
subdirectory. Set --base-path (/tmp/u_point)
for all scripts identically and do not change
the defaults of the file names.

The log files are written to /tmp/<script_name>.log
Logging to console is enabled with --toconsole. If
specified the level is set to DEBUG. Default is
INFO which means the scripts are almost silent.
If in trouble enable --toconsole.

Scripts u_acqurie.py and u_analyze.py can be
interrupted and resumed at any time, or while
u_acquire.py is still running, u_analyze.py
can be started several times, saving time -
use script do_loop_analize.sh or an adapted
version.


If options --plot and --animate are specified
u_acqurie.py and u_analyze.py show an updated
(animated) plot e.g. where the mount actually
points to or which position is currently
analyzed. If --ds9-display is specified then
FITS images will be displayed through DS9.
u_point.py behaves in the same way but has no
progress report.

At the beginning it is a good idea to use option
--toconsole which enables --level DEBUG and logs
to console.

Study --help of the following scripts since their options
will provide more flexibility than described in this
README.

- u_select.py
- u_acquire.py
- u_analyze.py
- u_point.py
- (u_simulate.py)

RTS2 rts2-scriptexec
--------------------
These scripts need your attention if you steer
a RTS2 mount, it is likely that you have to
adapt them: 

- u_acquire.sh
- u_acquire_plot.sh
- u_acquire_fetch_dss_continuous.sh

Data files
==========
The structure of the following files ins described
in file sutructures.py.


observable.cat
--------------
Created  by u_select.py contains the at latitude visible
bright stars.

nominal_positions.nml
---------------------
Created by u_acquire.py --create contains a grid of to
be observed sky locations. 

acquired_positions.acq
----------------------
Created by u_acquire.py contains the book keeping of all
measured positions.

analyzed_positions.anl
----------------------
Created by u_analyze.py contains the book keeping of all
SExtracted and astrometry position information.


Status u_point as of 2016-11-23
===============================
I just completed the first release. Missing are:

- proper documentation
- EQ mount analysis
- Python unit tests

Please feel free to contact me (wildi.markus@bluewin.ch)

Status u_point.py as of 2016-11-23
==================================
I started with astropy and found that there are
differences e.g. between EQ (CIRS) to AltAz
transformations I could not explain nor did
someone on astropy@scipy.org answer.

I developed u_point.py based on libnova and added
later the astropy code for comparison again. There
are still differences and I'd be glad if someone
can point me into the right direction.

The EQ models are not usable yet.

The AltAz model does not always converge. Repeat
the fitting several times to gain confidence. I
observed that fits on simulated data do not
converge. In such cases repeat the data generation.

Status u_acquire.py as of 2016-11-23
====================================
I dry tested u_acquire.py in simulation mode and
together with RTS2 dummy devices. I do not expect
any major failures if a real AltAz mount is used.

u_acquire.py is suitable for AltAz mounts but
soon EQ mounts can be used too.


Pointing Model
==============
If a different pointing model should be created,
study:

- model_base.py

and for working implementations:

- model_altaz.py
- model_buie.py
- model_u_point.py

Meteo
=====
Often meteo data are acquired from a separate
system. Either provided by RTS2 or an external
source. See classes Meteo() in meteo.py (dummy)
or e.g. meteo_dome_c.py for a real implementation.

As default Meteo() from meteo.py is used if not
specified with --meteo-class.

meteo.py is a dummy device while meteo_dome_c.py is
an example querying a weather station's web page.


Preparation: u_select.py, u_acquire.py
======================================
This step is required in case one can not
use astrometry.net. From SExtractor's list
only the brightest star is retrieved and that
should be Yale Bright Star Catalog object..

Script u_select.py  filters objects which are
visible at a given latitude

 u_select.py --obs-latitude m75.1 --plot

and writes it to a file. The default can be
replaced with option --observable-catalog.
For further options use u_select.py --help.

The to be observed grid of nominal AltAz
positions is created by

 u_acquire.py --create-nominal --plot

and the result is written to nominal_positions.nml
if not specified differently. Check the plot and if
not satisfied see options --altitude-interval,
--azimuth-interval, --az-step and --alt-step for
further refinements.


Data acquisition: u_acquire.py
==============================
The data acquisition can be interrupted and resumed
at any time.

Two modes of operations exist:

1) non continuous mode (--mode-user)
2) continuous mode (default)

If operated in default mode, no user interaction
is required.
To watch the mount acquiring data, in case of
--device-class DeviceDss (default), use

./u_acquire.py --base-path $BASE_PATH --plot \
  --ds9-display --animate  --toconcsole

with option --device-class DeviceRts2 (adapt
u_acquire_plot.sh to your needs)

 plt_script="$HOME/rts2/scripts/u_point/u_acquire_plot.sh"
 rts2-scriptexec -d C0 -s " exe $plt_script" 

If operated in user  mode, user interaction is
required and it is done via telnet 127.0.0.1 usually
on port 9999 (see /tmp/u_acquire.log for the actual
setting). Allowed commands are setting a different
exposure time or redo a given nominal position ev.
with a different exposure time.

The mount is operated through, e.g. DeviceRts2 (see
devices.py). The 'ORI' (see rts2-mon, T0) coordinates
are set by u_acquire.py. Once u_acquire.py waits for
user input, the mount can be commanded using 'OFFS'
(see rts2-mon, T0) to center the object on the CCD.

If the CCD can not be driven by RTS2 or it is not
suitable, a watch dog can be set to monitor the
directory where the FITS images are written, see
options

   --mode-watchdog
   --watchdog-directory

The final output of u_acquire.py is a book keeping
file, usually named acquired_positions.acq (see
option --acquired-position) where all necessary
information is stored.


Image analysis: u_analyze.py
============================
u_acquire.py does not analyze the images, that is the
task of u_analyze.py. 

u_analyze.py writes RA/Dec coordinates of the
brightest star and the field center, obtained by
astrometry.net, to a second file, usually named:

 analyzed_positions.anl

This is the input to u_point.py.

In case the analysis was interrupted, analyzed
positions are read back from analyzed_positions.anl
and dropped if the measurement is complete. In
case SExtractor and astrometry.net are used both
results must be present.

If process u_acquire.py is still in progress, you may
analyze the already acquired data. 


Pointing model: u_point.py
==========================
The file analyzed_positions.anl, prepared in the
previous step, is read by

 ./u_point.py --base-path /tmp/u_point --plot 

and the plots will show the result of the fitted
parameters as well as the raw data.

All plots have a call back function. If a data point
is clicked, it is annotated on all other plots.


Defining a model
================
Not satisfied with the existing models:

 model_buie.py
 model_u_point.py
 model_altaz.py

create your own. Create class Model(ModelBase) and
implement three methods (see e.g. model_altaz.py):

  def d_lon(self,cat_lons,cat_lats,d_lons):
  def d_lat(self,cat_lons,cat_lats,d_lats):
  def fit_model(self,cats=None,mnts=None,selected=None,**kwargs):

where cat_* are apparent and d_* are the differences
between cat_* - mnt_*, where mnt_* are the coordinates
read at the setting circles of the mount. If method fit_model()
is implemented for a EQ style fit (see model_u_point.py), 
observatory's latitude has to be passed:

  def fit_model(self,cats=None,mnts=None,selected=None,**kwargs):
    if kwargs is None:
      self.lg.error('expected key word: obs, exiting'.format(name, value))
      sys.exit(1)

    for name, value in kwargs.items():
      if 'obs' in name:
        self.phi=value.latitude.radian
        break
      else:
        self.lg.error('got unexpected key word: {0}={1}, exiting'.format(name, value))
        sys.exit(1)

Walk through with RTS2 dummy devices
====================================

The following description walks you through a simulated
data acquisition with DSS image retrieval for an easy
comparison with the "real" sky.

Configure RTS2 with dummy devices (/etc/rts2/devices):

 #RTS2 devices configuration
 #device type    device_name     options
 camd    dummy   C0      --width 862 --height 655 --frame-transfer --localhost localhost
 teld    dummy   T0      --move fast --localhost localhost
 
u_point is not yet installed on the system's PYTHON path.

 cd $HOME/rts2/scripts/u_point
 
Create the site specific observable star catalog based on
Yale Bright Star catalog, see help for e.g. observatory
specific options

 ./u_select.py --plot --brightness-interval "6.0 7.0" --minimum-separation 1.5
 ls -l observable.cat
 -rw-rw-r-- 1 wildi wildi 108813 Nov  6 10:38 observable.cat

Start simulated data acquisition:

 sudo bash
 systemctl start rts2 # Ubuntu 16.04, see $HOME/rts2/conf/rts2.service
 rts2-scriptexec -d C0 -s " exe ./u_acquire_fetch_dss_continuous.sh "

In a separate terminal:

 tail -f /tmp/u_acquire.log 

or at any time for a progress report plot (check option
--base-path)

 ./u_acquire.py --plot --animate --ds9-display

Red dots are remaining nominal and blue dots are acquired positions
To see DSS catalog FITS images, click on a blue point.



Recommended terminal set up
---------------------------

For each listed command open a terminal which can be
viewed "in parallel":

 tail -f /tmp/u_acquire.log 
 telnet 127.0.0.1 9999
 ./u_acquire.py --plot;ds9 -zscale dss*fits
 rts2-scriptexec -d C0 -s " exe ./u_acquire_fetch_dss_continuous.sh "


Pointing model analysis: u_point.py
===================================

The current version does not support the old data format.
This section is informative only

I will update this section as soon I converted the data.

Fetch real data and fit them

 cd ~/rts2/scripts/u_point/
 wget http://azug.minpet.unibas.ch/~wildi/mount_data_meteo.txt
 ./u_point.py --toc mount_data_meteo.txt --plot

the output should be similar to:

 --------------------------------------------------------
 fitted values:
 C1: horizontal telescope collimation: -339.9976 [arcsec]
 C2: constant azimuth offset         :+1024.7588 [arcsec]
 C3: tipping-mount collimation       :   +3.1370 [arcsec]
 C4: azimuth axis tilt West          : +719.9432 [arcsec]
 C5: azimuth axis tilt North         : +422.3190 [arcsec]
 C6: vertical telescope collimation  : +579.9046 [arcsec]
 C7: gravitational tube bending      :  -85.1722 [arcsec]
 /home/wildi/sw/python/v_point/lib/python3.5/site-packages/scipy/optimize/minpack.py:427: RuntimeWarning: Number of calls to function has reached maxfev = 800.
  warnings.warn(errors[info][0], RuntimeWarning)
  fit projection not converged, status: 5

and the plots appear. Ignore the warning since it is related
to a Gaussian fit. Then do a simulation

  ./u_simulate.py --sigma 0. --aa "-339.99 1024.75 3.13  719.9 422.31 579.9 -85.17" --mount-data test.dat  --step 12
  
and the output should be similar to:

 input parameters
 C1: horizontal telescope collimation: -339.9900 [arcsec]
 C2: constant azimuth offset         :+1024.7500 [arcsec]
 C3: tipping-mount collimation       :   +3.1300 [arcsec]
 C4: azimuth axis tilt West          : +719.9000 [arcsec]
 C5: azimuth axis tilt North         : +422.3100 [arcsec]
 C6: vertical telescope collimation  : +579.9000 [arcsec]
 C7: gravitational tube bending      :  -85.1700 [arcsec]
 end input parameters

and finally fit the simulated data with

 ./u_point.py --toc  --u_point_analyzed_position test.dat

and the output shows the parameters in good agreement

 --------------------------------------------------------
 fitted values:
 C1: horizontal telescope collimation: -339.9803 [arcsec]
 C2: constant azimuth offset         :+1031.2422 [arcsec]
 C3: tipping-mount collimation       :   +3.1193 [arcsec]
 C4: azimuth axis tilt West          : +718.4110 [arcsec]
 C5: azimuth axis tilt North         : +422.1173 [arcsec]
 C6: vertical telescope collimation  : +579.8966 [arcsec]
 C7: gravitational tube bending      :  -85.1844 [arcsec]
 /home/wildi/sw/python/v_point/lib/python3.5/site-packages/scipy/optimize/minpack.py:427: RuntimeWarning: Number of calls to function has reached maxfev = 800.
  warnings.warn(errors[info][0], RuntimeWarning)
  fit projection not converged, status: 5

And the simulated plots are as "ugly" as the data.
