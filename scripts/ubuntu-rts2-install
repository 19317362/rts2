#!/bin/bash
cat <<EOF
This script will configure Ubuntu 11.04 to run RTS2

It is primary intended for demonstration of RTS2 capabilities
for workshop about observing with the 1.5m class telescope
at AOB.

Please provide password for sudo if you will be asked for it. You
can review the script before running it from its source code.

(C) 2011 Petr Kubanek, Institute of Physics, Prague <kubanek@fzu.cz>
(C) 2012 Petr Kubanek, <petr@kubanek.net>
EOF

with_db=1
download_dir=/tmp

# process arguments
while [ "x$1" != "x" ]; do
	arg=$1
	shift
	case $arg in
		--help)
			cat <<EOF

This script will configure RTS2 on Ubuntu. The following options can be added to modify script behaviour:
	--help,-h       print this help
	--without-db    do not configure database, compile without PostgreSQL database bindings
	--download-dir  download packages to the given directory

EOF
			exit
			;;
		--without-db)
			with_db=0
			;;
		--download-dir)
			download_dir=$1
			if [ "x$download_dir" == "x" ]; then
				echo "Empty download dir argument, exiting"
				exit
			fi
			shift
			;;
esac

done

cpuarch=`uname -m`
eval `cat /etc/lsb-release`

case $cpuarch in
	x86_64)
		echo '64 bit Linux detected'
		;;
	i?86)
		echo '32 bit Linux detected'
		;;
	*)
		echo "Unknow hardware: $cpuarch. Please check the script for details"
		cpuarch=""
		;;
esac

if [ x$cpuarch != x ]; then

echo "Adding extra repositories"

if [ $with_db == 1 ]; then
	extra_p="postgresql libecpg-dev"
	case $DISTRIB_CODENAME in
		natty)
			extra_p="$extra_p postgresql-server-dev-8.4"
			;;
		oneiric|precise|debian)
			extra_p="$extra_p postgresql-server-dev-9.1"
			;;
		*)
	esac		
fi

sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu $DISTRIB_CODENAME restricted multiverse universe"
sudo apt-get -y update

echo "Installing required debian packages"

sudo apt-get -y install subversion $extra_p automake libtool libcfitsio3-dev libnova-dev gcc g++ libncurses5-dev libgraphicsmagick++1-dev libx11-dev docbook-xsl xsltproc libxml2-dev libarchive-dev python-numpy python-scipy python-pyfits python-matplotlib libxt-dev libfftw3-dev liblapack-dev libatlas-dev libatlas-base-dev gnuplot-x11 patch make libjson-glib-dev libsoup2.4-dev pkg-config

echo "Downloading DS9"

case $cpuarch in
	'x86_64')
		wget -O ${download_dir}/ds9.tar.gz http://hea-www.harvard.edu/saord/download/ds9/linux64/ds9.linux64.6.2.tar.gz
		;;
	*)
		wget -O ${download_dir}/ds9.tar.gz http://hea-www.harvard.edu/saord/download/ds9/linux/ds9.linux.6.2.tar.gz
		;;
esac

echo "Installing DS9"
cd $download_dir
tar xzf ${download_dir}/ds9.tar.gz
sudo cp ${download_dir}/ds9 /usr/bin

echo "Retrievening, configuring, compiling and installing pyds9"
wget -O ${download_dir}/pyds9.tar.gz http://hea-www.harvard.edu/saord/download/ds9/python/pyds9-1.3.tar.gz
tar xzf ${download_dir}/pyds9.tar.gz
cd pyds9-1.3
sudo python ./setup.py install

echo "Installing XPA library"
cd xpa-*
sudo make install

cd ${download_dir}
echo "Retrieving, configuring, compiling and installing sextractor"
wget -O ${download_dir}/sextractor.tar.gz http://www.astromatic.net/download/sextractor/sextractor-2.8.6.tar.gz
tar xzf ${download_dir}/sextractor.tar.gz
cd sextractor-*


echo -n "Patching acx_atlas detection.. "
patch <<'EOF'
*** acx_atlas.m4	2009-01-29 14:52:02.000000000 +0100
--- acx_atlas.m4	2012-01-14 11:07:23.169345901 +0100
*************** dnl --------------------
*** 22,59 ****
  acx_atlas_ok=no
  if test x$2 = x; then
    if test x$1 = x; then
!     AC_CHECK_HEADERS([cblas.h clapack.h],[acx_atlas_ok=yes])
!     if test x$acx_atlas_ok = xyes; then
        AC_DEFINE(ATLAS_BLAS_H, "cblas.h", [BLAS header filename.])
-       AC_DEFINE(ATLAS_LAPACK_H, "clapack.h", [CLAPACK header filename.])
      else
!       AC_CHECK_HEADERS([atlas/cblas.h atlas/clapack.h],[acx_atlas_ok=yes])
!       if test x$acx_atlas_ok = xyes; then
          AC_DEFINE(ATLAS_BLAS_H, "atlas/cblas.h", [BLAS header filename.])
          AC_DEFINE(ATLAS_LAPACK_H, "atlas/clapack.h", [CLAPACK header filename.])
        else
!         atlas_def=/usr/local/atlas
          AC_CHECK_HEADERS(
! 		[$atlas_def/include/cblas.h $atlas_def/include/clapack.h],
! 		[acx_atlas_ok=yes])
          if test x$acx_atlas_ok = xyes; then
            AC_DEFINE_UNQUOTED(ATLAS_BLAS_H, "$atlas_def/include/cblas.h",
! 		[BLAS header filename.])
            AC_DEFINE_UNQUOTED(ATLAS_LAPACK_H, "$atlas_def/include/clapack.h",
! 		[CLAPACK header filename.])
          else
!           atlas_def=/usr/atlas
!           AC_CHECK_HEADERS(
! 		[$atlas_def/include/cblas.h $atlas_def/include/clapack.h],
! 		[acx_atlas_ok=yes])
!           if test x$acx_atlas_ok = xyes; then
!             AC_DEFINE_UNQUOTED(ATLAS_BLAS_H, "$atlas_def/include/cblas.h",
! 		[BLAS header filename.])
!             AC_DEFINE_UNQUOTED(ATLAS_LAPACK_H, "$atlas_def/include/clapack.h",
! 		[CLAPACK header filename.])
!           else
!             ATLAS_ERROR="CBLAS/LAPack include files not found!"
!           fi
          fi
        fi
      fi
--- 22,74 ----
  acx_atlas_ok=no
  if test x$2 = x; then
    if test x$1 = x; then
!     acx_cblas_ok=no
!     AC_CHECK_HEADERS([cblas.h],[acx_cblas_ok=yes])
!     if test x$acx_cblas_ok = xyes; then
        AC_DEFINE(ATLAS_BLAS_H, "cblas.h", [BLAS header filename.])
      else
!       AC_CHECK_HEADERS([atlas/cblas.h],[acx_cblas_ok=yes])
!       if test x$acx_cblas_ok = xyes; then
          AC_DEFINE(ATLAS_BLAS_H, "atlas/cblas.h", [BLAS header filename.])
+       fi
+     fi
+ 
+     acx_clapack_ok=no
+     AC_CHECK_HEADERS([clapack.h],[acx_clapack_ok=yes])
+     if test x$acx_clapack_ok = xyes; then
+       AC_DEFINE(ATLAS_LAPACK_H, "clapack.h", [CLAPACK header filename.])
+     else
+       AC_CHECK_HEADERS([atlas/clapack.h],[acx_clapack_ok=yes])
+       if test x$acx_clapack_ok = xyes; then
          AC_DEFINE(ATLAS_LAPACK_H, "atlas/clapack.h", [CLAPACK header filename.])
+       fi
+     fi
+ 
+     if test x$acx_cblas_ok = xyes -a x$acx_clapack_ok = xyes; then
+       AC_MSG_NOTICE(Found both clapack and cblas in standard directories.)
+       acx_atlas_ok=yes
+     else  
+       atlas_def=/usr/local/atlas
+       AC_CHECK_HEADERS(
+       	[$atlas_def/include/cblas.h $atlas_def/include/clapack.h],
+       	[acx_atlas_ok=yes])
+       if test x$acx_atlas_ok = xyes; then
+         AC_DEFINE_UNQUOTED(ATLAS_BLAS_H, "$atlas_def/include/cblas.h",
+       	[BLAS header filename.])
+         AC_DEFINE_UNQUOTED(ATLAS_LAPACK_H, "$atlas_def/include/clapack.h",
+       	[CLAPACK header filename.])
        else
!         atlas_def=/usr/atlas
          AC_CHECK_HEADERS(
!       	[$atlas_def/include/cblas.h $atlas_def/include/clapack.h],
!       	[acx_atlas_ok=yes])
          if test x$acx_atlas_ok = xyes; then
            AC_DEFINE_UNQUOTED(ATLAS_BLAS_H, "$atlas_def/include/cblas.h",
!       	[BLAS header filename.])
            AC_DEFINE_UNQUOTED(ATLAS_LAPACK_H, "$atlas_def/include/clapack.h",
!       	[CLAPACK header filename.])
          else
!           ATLAS_ERROR="CBLAS/LAPack include files not found!"
          fi
        fi
      fi
EOF

if [ $? == 0 ]; then
	echo 'ok'
else
	echo 'failed'
	exit 1
fi

./configure --disable-threads --prefix=/usr
make
sudo make install

sudo mv /usr/bin/sex /usr/bin/sextractor

cd ~

if [ $with_db == 1 ]; then
	echo "Granting root access to postgresql database"
	sudo sudo -u postgres createuser -s root

	echo "Creating local user"
	sudo sudo -u postgres createuser -SDR $USER
fi

echo "Source files will be downloaded and configured in `pwd`."

if [ -d rts2 ]; then
	echo "Updating RTS2 source code"
	cd rts2
	svn up
	cd ..
else
	if [ -f rts2 ]; then
		echo "Please remove rts2 file and rerun!"
	else
		echo "Retrieving RTS2 source code"
		svn co svn://svn.code.sf.net/p/rts-2/code/trunk/rts-2 rts2
	fi
fi

if [ -d pyrts2 ]; then
	echo "Updating pyrts2 source code"
	cd pyrts2
	svn up
	cd ..
else
	if [ -f pyrts2 ]; then
		echo "Please remove pyrts2 file and rerun!"
	else
		echo "Retrieving PyRTS2 source code"
		svn co svn://svn.code.sf.net/p/rts-2/code/trunk/pyrts2 pyrts2
	fi
fi

echo "Compiling RTS2"

cd rts2
./autogen.sh
if [ $with_db == 1 ]; then
	./configure --without-wcs
else
	./configure --without-wcs --without-pgsql
fi
make
sudo make install

if grep "/usr/local/lib" /etc/ld.so.conf >/dev/null; then
	echo "/usr/local/lib is present in /etc/ld.so.conf"
else
	echo "Adding /usr/local/lib to ld.so.conf"
	sudo echo -e "\n/usr/local/lib" >> /etc/ld.so.conf
	sudo ldconfig
fi

echo "Configuring RTS2"
sudo ./rts2-init
sudo cp rts2.logrotate /etc/logrotate.d/rts2

echo "Creating proper rts2.ini configuration file"

cat conf/rts2.ini | sed -e "s/altitude = xxxx/altitude = 600/" -e "s/longitude = xxxx/longitude = 15/" -e "s/latitude = xxxx/latitude = 50/" > ${download_dir}/rts2.ini

sudo cp ${download_dir}/rts2.ini /etc/rts2/rts2.ini

if [ $with_db == 1 ]; then

	echo "Creating postgresql database"

	sudo createdb stars
	sudo psql stars <<EOF
alter group observers add user $USER;
EOF

	echo "Building postgresql database"
	cd src/sql/
	sudo ./rts2-builddb stars

	echo "Adding rts2test user"
	rts2-user -a rts2test --password 1234

	echo "Adding T0 telescope"
	./rts2-configdb stars -t T0

	echo "Adding C0 camera"
	./rts2-configdb stars -c C0

	echo "Adding W0 filter wheel"
	./rts2-configdb stars -f W0
fi

cd ~

echo "Starting RTS2"

sudo /etc/init.d/rts2 start

if [ $with_db == 1 ]; then
	echo "Running queues API. Use localhost:8889 as URI, rts2test as user and 1234 as password."
	./pyrts2/widgets/queues.py
fi

echo "Running rts2-mon. Please exit it with ctrl+c"
rts2-mon

fi
