#!/usr/bin/env python

# g(pl)-Point - GPLed Telescope pointing model fit, as described in paper by Marc Buie:
#
# ftp://ftp.lowell.edu/pub/buie/idl/pointing/pointing.pdf 
#
# (C) 2015-2016 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import sys
import rts2.gpoint
import numpy as np

import argparse

def generate_model(args):
	"""Generate pointing model."""
	model = rts2.gpoint.GPoint(args.verbose,latitude=args.latitude)

	for e in args.extra:
		es = e.split(':')
		if len(es) != 4:
			sys.exit('invalid extra function description: {0}'.format(e))
		model.add_extra(*es)

	model.process_files(args.inputfiles,args.flips)
	if args.stat_only == False:
		while True:
			model.fit(maxfev=args.maxfev, ftol=args.ftol, xtol=args.xtol, gtol=args.gtol)
			model.print_params()
			if args.filter is None:
				break
			fs = args.filter.split(':')
			if len(fs) != 2 and len(fs) != 3:
				sys.exit('invalid filter parameter')
			filnum = int(fs[2]) if len(fs) == 3 else 1
			removed = model.filter(fs[0], float(fs[1]) / 3600.0, filnum)
			if removed is None:
				print 'model within bounds'
				break
			print 'removed line {0}'.format(removed)
	model.print_stat()

	if args.model_output is not None:
		model.save(args.model_output)
	if args.error_output is not None:
		f = open(args.error_output,'w+')
		out_dat = model.indata
		out_dat = np.append(out_dat,map(lambda x:[x*3600],model.diff_ha),axis=1)
		out_dat = np.append(out_dat,map(lambda x:[x*3600],model.diff_dec),axis=1)
		out_dat = np.append(out_dat,map(lambda x:[x*3600],model.diff_angular),axis=1)
		for b in out_dat:
			f.write('{0}\n'.format('\t'.join(b)))
		f.close()

	plots = args.plots
	if args.basic_plots:
		bp='num:model-err,num:ha-err,num:dec-err'
		plots=','.join([bp,plots]) if plots else bp

	if args.altaz_plots:
		altaz='num:model-err%0:0:3:1,num:ha-err%1:0:1:1,num:dec-err%2:0:1:1,paz:contour-model-err%1:1:2:2'
		plots=','.join([altaz,plots]) if plots else altaz

	if args.altaz_heatmaps:
		altaz='paz:contour-real-err%0:0:1:1,paz:contour-model-err%0:1:1:1'
		plots=','.join([altaz,plots]) if plots else altaz

	if plots:
		model.plot(plots,args.plot_band,args.oplot)

# Plot model offsets
def plot_offsets(args):
	if args.latitude == None:
		sys.exit('you must specify latitude as parameter')
	# load model..
	params = load_model(args.inputfiles[0])
	
	ha_b,ha_e,dec = map(lambda f:float(f),args.plot_offsets.split(':'))
	
	model = rts2.gpoint.GPoint(args.verbose,latitude=args.latitude)
	model.plotoffsets(params,ha_b,ha_e,dec)

def add_models(args):
	if len(args.inputfiles) < 2:
		sys.exit('need at least two models to add')

	m_out = rts2.gpoint.GPoint(args.verbose,latitude=args.latitude)
	m_out.load(args.inputfiles[0])
	for f in args.inputfiles[1:]:
		m = rts2.gpoint.GPoint()
		m.load(f)
		m_out.add_model(m)
	
	if args.model_output is not None:
		m_out.write(model_output)

	print m_out

if __name__ == '__main__':
	parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description='G-Point Model fitting and error plotting routines. Input/output file format is described in manual page (man gpoint).\n\nExample usage:\n\n'\
        '\tgpoint -p ha:ha-merr,mjd:ha-err,num:dec-err modelin\tproduces model and ha model error,ha-err and dec-err plots')
	parser.add_argument('inputfiles',help='input file(s)',type=str,nargs='+')
	parser.add_argument('-o',dest='model_output',action='store',help='model output filename')
	parser.add_argument('-p',dest='plots',action='store',help='plot graphs, please see manual page for examples (allowed axis names: alt-err,az-err,dec-err,ha-err,alt-merr,az-merr,dec-merr,ha-merr,mjd,num,paz,az,alt,dec,ha,model-err,real-err)')
	parser.add_argument('-s',dest='oplot',action='store',help='save plot to file instead of displaying it on screen',default=None)
	parser.add_argument('--basic-plots',dest='basic_plots',action='store_true',help='plot basic graphs (num:model-err,num:ha-err,num:dec-err)',default=False)
	parser.add_argument('--stat-only',dest='stat_only',action='store_true',help='do not attempt to fit the model - only print statistics',default=False)
	parser.add_argument('--altaz-plots',dest='altaz_plots',action='store_true',help='plot basic and Alt-az distribution graphs (num:model-err,num:ha-err,num:dec-err,paz:contour-model-err%%1:1:2:2)',default=False)
	parser.add_argument('--altaz-heatmaps',dest='altaz_heatmaps',action='store_true',help='plot alt-az distributions with predicted modelled and real (unmodelled) heatmaps',default=False)
	parser.add_argument('--flip',dest='flips',action='store',help='flips (both, east, west - select pointings only on given side)',default='both')
	parser.add_argument('-e',dest='error_output',action='store',help='save file with pointing and model errors')
	parser.add_argument('-v',dest='verbose',action='count',help='verbose')
        parser.add_argument('--mnt-flip',dest='mnt_flip',action='store',help='select only observations with the given flip (1 where abs(dec)>90')
	parser.add_argument('--latitude',dest='latitude',action='store',default=None,type=float,help='observatory latitude (north is positive)')
	parser.add_argument('--model-input',dest='model_input',action='store_true',default=False,help='input file(s) are existing model file(s) to load and investigate')
	parser.add_argument('--plot-offsets',dest='plot_offsets',action='store',default=None,type=str,help='plot offsets from the model file; either specify ha start-end-dec, or start interactive mode')
	parser.add_argument('--filter',dest='filter',action='store',default=None,help='filter values which does not fit the model. Those can be errornous measurements')
	parser.add_argument('--band',dest='plot_band',action='store',help='put on plots rectange with given height around 0. Specify band height in arcsec')
	parser.add_argument('--add-models',dest='add_models',action='store_true',default=False,help='add input models together, produce output model combining both')
	parser.add_argument('--extra',dest='extra',action='append',default=[],help='extra (harmonics,...) functions')
	parser.add_argument('--maxfev',dest='maxfev',action='store',default=10000,help='maximal number of least square fitting itterations',type=int)
	parser.add_argument('--ftol',dest='ftol',action='store',default=1.49012e-08,help='relative error desired in the sum of squares',type=float)
	parser.add_argument('--xtol',dest='xtol',action='store',default=1.49012e-08,help='relative error desired in the approximate solution',type=float)
	parser.add_argument('--gtol',dest='gtol',action='store',default=0,help='orthogonality desired between the function vector and the columns of the Jacobian',type=float)

	parser.add_argument('-i',dest='interactive',action='store_true',default=False,help='run interactively, open console to type commands')

	args = parser.parse_args()

	if args.model_input:
		plot_offsets(args)
	elif args.add_models:
		add_models(args)
	else:
		generate_model(args)
