#!/usr/bin/env python

# g(pl)-Point - GPLed Telescope pointing model fit, as described in paper by Marc Buie:
#
# ftp://ftp.lowell.edu/pub/buie/idl/pointing/pointing.pdf 
#
# (C) 2015-2016 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import sys
import rts2.gpoint
import numpy as np

import argparse

# Generate pointing model
def generateModel(args):
	model = rts2.gpoint.GPoint(args.verbose,latitude=args.latitude)

	model.process_files(args.inputfiles,args.flips)
	if args.stat_only == False:
		model.fit()
		model.print_params()
	model.print_stat()

	if args.model_output is not None:
		f = open(args.model_output,'w+')
		f.write(model.get_model_type() + ' ')
		f.write(' '.join(map(lambda x:str(x),model.best)))
		f.close()
	if args.error_output is not None:
		f = open(args.error_output,'w+')
		out_dat = model.indata
		out_dat = np.append(out_dat,map(lambda x:[x*3600],model.diff_ha),axis=1)
		out_dat = np.append(out_dat,map(lambda x:[x*3600],model.diff_dec),axis=1)
		out_dat = np.append(out_dat,map(lambda x:[x*3600],model.diff_angular),axis=1)
		for b in out_dat:
			f.write('{0}\n'.format('\t'.join(b)))
		f.close()

	plots = args.plots
	if args.basic_plots:
		bp='num:model-err,num:ha-err,num:dec-err'
		plots=','.join([bp,plots]) if plots else bp

	if args.altaz_plots:
		altaz='num:model-err%0:0:3:1,num:ha-err%1:0:1:1,num:dec-err%2:0:1:1,paz:contour-model-err%1:1:2:2'
		plots=','.join([altaz,plots]) if plots else altaz

	if args.altaz_heatmaps:
		altaz='paz:contour-real-err%0:0:1:1,paz:contour-model-err%0:1:1:1'
		plots=','.join([altaz,plots]) if plots else altaz

	if plots:
		model.plot(plots,args.plot_band,args.oplot)

def loadModel(modelfile):
	f = open(modelfile)
	line = f.readline().split()
	if not ((line[0] == 'RTS2_MODEL' and len(line) == 10) or (line[0] == 'RTS2_ALTAZ' and len(line) == 11)):
		sys.exit('invalid input model format')
	f.close()
	return line[0],map(lambda f:float(f),line[1:])

# Plot model offsets
def plotOffsets(args):
	if args.latitude == None:
		sys.exit('you must specify latitude as parameter')
	# load model..
	params = loadModel(args.inputfiles[0])
	
	ha_b,ha_e,dec = map(lambda f:float(f),args.plot_offsets.split(':'))
	
	model = rts2.gpoint.GPoint(args.verbose,latitude=args.latitude)
	model.plotoffsets(params,ha_b,ha_e,dec)

def addModels(args):
	params=[]
	emt = None
	for f in args.inputfiles:
		mt,m = loadModel(f)
		if emt is None:
			emt = mt
		elif emt != mt:
			sys.exit('incompatible models: {0} {1}'.format(emt,mt))
		params.append(m)
	
	out = map(lambda f:str(f),np.sum(params,axis=0))

	if args.model_output is not None:
		f = open(args.model_output,'w+')
		f.write(emt + ' ')
		for b in out:
			f.write('{0} '.format(b))
		f.close()

	print emt,' '.join(out)

if __name__ == '__main__':
	parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description='G-Point Model fitting and error plotting routines. Input/output file format is described in manual page (man gpoint).\n\nExample usage:\n\n'\
        '\tgpoint -p ha:ha-merr,mjd:ha-err,num:dec-err modelin\tproduces model and ha model error,ha-err and dec-err plots')
	parser.add_argument('inputfiles',help='input file(s)',type=str,nargs='+')
	parser.add_argument('-o',dest='model_output',action='store',help='model output filename')
	parser.add_argument('-p',dest='plots',action='store',help='plot graphs, please see manual page for examples (allowed axis names: alt-err,az-err,dec-err,ha-err,alt-merr,az-merr,dec-merr,ha-merr,mjd,num,paz,az,alt,dec,ha,model-err,real-err)')
	parser.add_argument('-s',dest='oplot',action='store',help='save plot to file instead of displaying it on screen',default=None)
	parser.add_argument('--basic-plots',dest='basic_plots',action='store_true',help='plot basic graphs (num:model-err,num:ha-err,num:dec-err)',default=False)
	parser.add_argument('--stat-only',dest='stat_only',action='store_true',help='do not attempt to fit the model - only print statistics',default=False)
	parser.add_argument('--altaz-plots',dest='altaz_plots',action='store_true',help='plot basic and Alt-az distribution graphs (num:model-err,num:ha-err,num:dec-err,paz:contour-model-err%%1:1:2:2)',default=False)
	parser.add_argument('--altaz-heatmaps',dest='altaz_heatmaps',action='store_true',help='plot alt-az distributions with predicted modelled and real (unmodelled) heatmaps',default=False)
	parser.add_argument('--flip',dest='flips',action='store',help='flips (both, east, west - select pointings only on given side)',default='both')
	parser.add_argument('-e',dest='error_output',action='store',help='save file with pointing and model errors')
	parser.add_argument('-v',dest='verbose',action='count',help='verbose')
        parser.add_argument('--mnt-flip',dest='mnt_flip',action='store',help='select only observations with the given flip (1 where abs(dec)>90')
	parser.add_argument('--latitude',dest='latitude',action='store',default=None,type=float,help='observatory latitude (north is positive)')
	parser.add_argument('--model-input',dest='model_input',action='store_true',default=False,help='input file(s) are existing model file(s) to load and investigate')
	parser.add_argument('--plot-offsets',dest='plot_offsets',action='store',default=None,type=str,help='plot offsets from the model file; either specify ha start-end-dec, or start interactive mode')
	parser.add_argument('--band',dest='plot_band',action='store',help='put on plots rectange with given height around 0. Specify band height in arcsec')
	parser.add_argument('--add-models',dest='add_models',action='store_true',default=False,help='add input models together, produce output model combining both')

	args = parser.parse_args()

	if args.model_input:
		plotOffsets(args)
	elif args.add_models:
		addModels(args)
	else:
		generateModel(args)
