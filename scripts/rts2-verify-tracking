#!/usr/bin/env python

# Find stars on image, compare tracking based on the stars.
#
# (C) 2016 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import numpy as np
import rts2.brights
from astropy.io import fits

import argparse
import gettext
gettext.install('rts2-verify-tracking')

parser = argparse.ArgumentParser(description=_('Find brightests star on the first image, look for star on similar position and brightnes on next image. Print tracking date (in pixel coordinates).'))

parser.add_argument('--radius', help=_('search stars on next image in given radius (in pixels)'), action='store', type=float, default=15)
parser.add_argument('--ds9', help=_('use DS9 to display images'), action='store_true', dest='useDS9', default=False)
parser.add_argument('--plot', help=_('plot results (x,y,pixel distances)'), action='store_true', dest='plot', default=False)
parser.add_argument('--save-plot', help=_('do not display plot results, save plots to a file'), action='store', dest='saveplot')
parser.add_argument('-v', help=_('increases verbosity'), action='count', dest='verbose', default=0)
parser.add_argument('files', help=_('files to process'), action='store', default=[], nargs='+')
parser.add_argument('--stars', help=_('number of stars to use'), action='store', dest='stars', default=1, type=int)

options = parser.parse_args()

def RMS(vector):
	return np.sqrt(np.mean(np.square(vector)))

def pixel_distance(x1,y1,x2,y2):
	return np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)

for fn in options.files:
	print fn
	hdu = fits.open(fn)
	sb = [] # contains selected x, y, flux as members
	for si in range(options.stars):
		sb.append([])
	for ci in range(len(hdu[0].data)):
		objects = rts2.brights.find_stars(fn, hdu, options.verbose, options.useDS9, ci)
		if options.verbose > 1:
			print _('file {0} cube {1} brightest star on {2:.2f} {3:.2f}').format(fn, ci, objects[0]['x'],objects[0]['y'])
		if len(sb[0]) == 0:
			for si in range(options.stars):
				sb[si].append([objects[si]['x'], objects[si]['y'], objects[si]['flux']])
		else:
			for si in range(options.stars):
				for star in objects:
					dist = pixel_distance(sb[si][-1][0], sb[si][-1][1], star['x'], star['y'])
					if options.verbose > 1:
						print _('examining star # {0} x {1:.2f} y {2:.2f} flux {3:.2f} distance {4:.2f}').format(si, star['x'], star['y'], star['flux'], dist)
					if dist < options.radius:
						sb[si].append([star['x'], star['y'], star['flux']])
						break
	np_sb = np.array(sb)
	# calculate average position
	a_x = [0] * options.stars
	a_y = [0] * options.stars
	a_flux = [0] * options.stars
	max_x = [0] * options.stars
	max_y = [0] * options.stars
	max_flux = [0] * options.stars
	min_x = [0] * options.stars
	min_y = [0] * options.stars
	min_flux = [0] * options.stars

	a_dist = [0] * options.stars

	dist = [0] * options.stars
	for si in range(options.stars):

		data_x = np_sb[si,:,0]
		data_y = np_sb[si,:,1]
		data_flux = np_sb[si,:,2]

		max_x[si] = np.max(data_x)
		max_y[si] = np.max(data_y)
		max_flux[si] = np.max(data_flux)

		a_x[si] = np.average(data_x)
		a_y[si] = np.average(data_y)
		a_flux[si] = np.average(data_flux)

		min_x[si] = np.min(data_x)
		min_y[si] = np.min(data_y)
		min_flux[si] = np.min(data_flux)

		if options.verbose > 0:
			print _('star # {0} max x {1:.2f} y {2:.2f} flux {3:.2f}').format(si + 1, max_x[si], max_y[si], max_flux[si])
			print _('star # {0} average x {1:.2f} y {2:.2f} flux {3:.2f}').format(si + 1, a_x[si], a_y[si], a_flux[si])
			print _('star # {0} min x {1:.2f} y {2:.2f} flux {3:.2f}').format(si + 1, min_x[si], min_y[si], min_flux[si])
		# now get some stats..
		dist[si] = map(lambda s: pixel_distance(max_x[si], max_y[si], s[0], s[1]), sb[si])
		a_dist[si] = np.average(dist[si])

		print _('star # {0} pixel distance min {1} max {2} average {3} median {4} std {5} RMS {6}').format(si + 1, min(dist[si]), max(dist[si]), a_dist[si], np.median(dist[si]), np.std(dist[si]), RMS(dist[si] - a_dist[si]))

	if options.plot or options.saveplot:
		import pylab
		plotgrid = (3, 1)
		p_x = pylab.subplot2grid(plotgrid,[0,0])
		p_y = pylab.subplot2grid(plotgrid,[1,0])
		p_dist = pylab.subplot2grid(plotgrid,[2,0])

		for si in range(options.stars):
			p_x.plot (range(len(sb[si])), np_sb[si,:,0] - a_x[si], '-')
			p_y.plot (range(len(sb[si])), np_sb[si,:,1] - a_y[si], '-')
			p_dist.plot (range(len(sb[si])), a_dist[si] - dist[si], '-')

		pylab.tight_layout()

		if options.saveplot is None:
			pylab.show()
		else:
			pylab.savefig(options.saveplot)
