#!/usr/bin/env python

# Find stars on image, compare tracking based on the stars.
#
# (C) 2016 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import numpy as np
import sys
from astropy.io import fits

import argparse
import gettext
gettext.install('rts2-verify-tracking')

parser = argparse.ArgumentParser(description=_('Find brightests star on the first image, look for star on similar position and brightnes on next image. Print tracking date (in pixel coordinates).'))

parser.add_argument('--radius', help=_('search stars on next image in given radius (in pixels)'), action='store', dest='radius', type=float, default=15)
parser.add_argument('--ds9', help=_('use DS9 to display images'), action='store_true', dest='useDS9', default=False)
parser.add_argument('--plot', help=_('plot results (x,y,pixel distances,angles,a,b,theta)'), action='store_true', dest='plot', default=False)
parser.add_argument('--stars-plot', help=_('generate plot with stars positions'), action='store_true', dest='stars_plot', default=False)
parser.add_argument('--save-plot', help=_('do not display plot results, save plots to a file'), action='store', dest='saveplot')
parser.add_argument('-v', help=_('increases verbosity'), action='count', dest='verbose', default=0)
parser.add_argument('files', help=_('files to process'), action='store', default=[], nargs='+')
parser.add_argument('--stars', help=_('number of stars to use'), action='store', dest='stars', default=1, type=int)
parser.add_argument('--center-radius', help=_('select stars only that far from center'), action='store', dest='center_radius', default=None, type=float)
parser.add_argument('--split', help=_('split graphs/data if matching stars cannot be found'), action='store_true', dest='split', default=False)
parser.add_argument('--cube', help=_('process FITS cubes'), action='store_true', dest='cube', default=False)
parser.add_argument('--max-angle', help=_('allowed deviation in degrees of angel between stars (negative to not compute at all)'), action='store', dest='max_angle', default=0.1, type=float)
parser.add_argument('--skip-clouds', help=_('allowed number of images without detection - those will be skipped'), action='store', dest='skip_clouds', default=2, type=int)
parser.add_argument('--elipses', help=_('plot star fit elipsis parameters'), action='store_true', dest='elipses', default=False)

options = parser.parse_args()

# don't show if not needed
if not(options.plot) and options.saveplot is not None:
	import matplotlib
	matplotlib.use('agg')
# needs to be called after matplotlib
import rts2.brights
import rts2.progressbar

def RMS(vector):
	return np.sqrt(np.mean(np.square(vector)))

def pixel_distance(x1,y1,x2,y2):
	return np.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)

def calculate_angels(sb):
	"""Calculates matrice of angels between each star and another star"""
	angels = np.array([[[None] * len(sb)] * len(sb)] * len(sb[0]), np.float)
	# traverse by images, not by stars..
	for i in range(len(sb[0])):
		for s1 in range(len(sb)):
			for s2 in range(len(sb)):
				if s1 == s2:
					continue
				angels[i,s1,s2] = np.arctan2(sb[s1][i][0] - sb[s2][i][0], sb[s1][i][1] - sb[s2][i][1])
	return angels


class ProcessFiles:
	def __init__(self, nstars):
		self.sb = [] # contains selected x, y, flux as members
		self.skipped = 0
		for si in range(nstars):
			self.sb.append([])

	def process_file(self, fn, hdu, verbose, useDS9, stars, radius, skip_clouds, center_radius, split, ci=None):
		objects = rts2.brights.find_stars(fn, hdu, verbose, useDS9, ci)
		if verbose > 1:
			print _('file {0} cube {1} brightest star on {2:.2f} {3:.2f}').format(fn, ci, objects[0]['x'],objects[0]['y'])
		elif ci is not None:
			rts2.progressbar.progress(ci + 1, len(hdu[0].data))
		if len(self.sb[0]) == 0:
			si = 0
			bsi = 0
			while si < stars:
				if bsi == len(objects):
					if self.skipped < skip_clouds:
						if verbose:
							print _('skipping frame #{0}').format(ci)
						self.skipped += 1
						continue
					sys.exit(_('too few stars matching criteria'))
				x = objects[bsi]['x']
				y = objects[bsi]['y']
				flux = objects[bsi]['flux']
				c_d = pixel_distance(x, y, c_x, c_y)
				bsi += 1
				if verbose:
					print _('star x {0:.3f} y {1:.3f} center distance {2:.3f}').format(x, y, c_d)
				if center_radius is not None and c_d > center_radius:
					if verbose:
						print _('star too far from center')
					continue
				self.sb[si].append([x, y, flux, objects[bsi]['a'], objects[bsi]['b'], objects[bsi]['theta']])
				si += 1
		else:
			found_sb = []
			for si in range(stars):
				b_x = self.sb[si][-1][0]
				b_y = self.sb[si][-1][1]
				star_find = False
				for star in objects:
					dist = pixel_distance(b_x, b_y, star['x'], star['y'])
					if verbose > 1:
						print _('examining star # {0} x {1:.2f} y {2:.2f} flux {3:.2f} distance {4:.2f}').format(si, star['x'], star['y'], star['flux'], dist)
					if dist < radius:
						found_sb.append([star['x'], star['y'], star['flux'], star['a'], star['b'], star['theta']])
						star_find = True
						break
				if star_find == False and verbose:
					print(_('cube {0}: cannot find star #{1} close to {2:.2f} {3:.2f}').format(ci + 1, si + 1, b_x, b_y))
			if len(found_sb) < stars:
				if self.skipped < skip_clouds:
					self.skipped += 1
					return 1
				if split == False:
					sys.exit(_('too few stars ({0}) and too much clouded frames ({1}), exiting').format(len(found_sb), self.skipped))
				return -1

			for si in range(stars):
				self.sb[si].append(found_sb[si])

			return 0

	def done(self, verbose, stars, max_angle, plot, saveplot, stars_plot, elipses):
		if verbose == 0:
			print 'Done'

		np_sb = np.array(self.sb)
		# calculate average position
		a_x = [0] * stars
		a_y = [0] * stars
		a_flux = [0] * stars
		a_a = [0] * stars
		a_b = [0] * stars
		a_theta = [0] * stars

		max_x = [0] * stars
		max_y = [0] * stars
		max_flux = [0] * stars
		max_a = [0] * stars
		max_b = [0] * stars
		max_theta = [0] * stars

		min_x = [0] * stars
		min_y = [0] * stars
		min_flux = [0] * stars
		min_a = [0] * stars
		min_b = [0] * stars
		min_theta = [0] * stars

		a_dist = [0] * stars

		dist = [0] * stars

		ang_deviations = None
		max_deviation = 0

		for si in range(stars):
			data_x = np_sb[si,:,0]
			data_y = np_sb[si,:,1]
			data_flux = np_sb[si,:,2]
			data_a = np_sb[si,:,3]
			data_b = np_sb[si,:,4]
			data_theta = np_sb[si,:,5]

			max_x[si] = np.max(data_x)
			max_y[si] = np.max(data_y)
			max_flux[si] = np.max(data_flux)
			max_a[si] = np.max(data_a)
			max_b[si] = np.max(data_b)
			max_theta[si] = np.max(data_theta)

			a_x[si] = np.average(data_x)
			a_y[si] = np.average(data_y)
			a_flux[si] = np.average(data_flux)
			a_a[si] = np.average(data_a)
			a_b[si] = np.average(data_b)
			a_theta[si] = np.average(data_theta)

			min_x[si] = np.min(data_x)
			min_y[si] = np.min(data_y)
			min_flux[si] = np.min(data_flux)
			min_a[si] = np.min(data_a)
			min_b[si] = np.min(data_b)
			min_theta[si] = np.min(data_theta)

			if verbose > 0:
				print '  # stat {0:^8s} {1:^8s} {2:^8s} {3:^8s} {4:^s8} {5:^8s}'.format('x','y','flux','a','b','theta')
				print '{0:>3d} {1:^4s} {1:>8.2f} {2:>8.2f} {3:8>.2f} {4:8>.2f} {5:8>.2f}'.format(si + 1, 'max', max_x[si], max_y[si], max_flux[si], max_a[si], max_b[si], max_theta[si])
				print '{0:>3d} {1:^4s} {1:>8.2f} {2:>8.2f} {3:8>.2f} {4:8>.2f} {5:8>.2f}'.format(si + 1, 'avg', a_x[si], a_y[si], a_flux[si], a_a[si], a_b[si], a_theta[si])
				print '{0:>3d} {1:^4s} {1:>8.2f} {2:>8.2f} {3:8>.2f} {4:8>.2f} {5:8>.2f}'.format(si + 1, 'min', min_x[si], min_y[si], min_flux[si], min_a[si], min_b[si], min_theta[si])

			# now get some stats..
			dist[si] = map(lambda s: pixel_distance(max_x[si], max_y[si], s[0], s[1]), pf.sb[si])
			a_dist[si] = np.average(dist[si])

			print _('star # {0} pixel distance min {1:.2f} max {2:.2f} average {3:.2f} median {4:.2f} std {5:.2f} RMS {6:.2f}').format(si + 1, min(dist[si]), max(dist[si]), a_dist[si], np.median(dist[si]), np.std(dist[si]), RMS(dist[si] - a_dist[si]))

			if max_angle > 0 and stars > 1:
				angels = calculate_angels(np_sb)
				average_ang = np.average(angels, axis=0)
				ang_deviations = np.degrees(angels - average_ang)
				max_deviation = max(abs(np.nanmax(ang_deviations)), abs(np.nanmin(ang_deviations)))
				if verbose:
					print _('maximal angle deviation: {0:.3f}').format(max_deviation)

		if plot or saveplot or stars_plot:
			import pylab
			pylab.ioff()
			fig = pylab.figure()
			pa = 3 if elipses else 0
			plotgrid = ((3 + pa) if ang_deviations is None else (4 + pa), 1)
			print _('generating plots')
			rts2.progressbar.progress(0, stars + 1)
			p_x = pylab.subplot2grid(plotgrid,[0,0])
			p_y = pylab.subplot2grid(plotgrid,[1,0])
			p_dist = pylab.subplot2grid(plotgrid,[2,0])

			p_x.set_ylabel ('X (px)')
			p_y.set_ylabel ('Y (px)')
			p_dist.set_ylabel ('Dist. (px)')

			devoffs = 0

			if ang_deviations is not None:
				p_ang = pylab.subplot2grid(plotgrid,[3,0])
				p_ang.plot (range(len(pf.sb[0])), np.average(ang_deviations, axis=1), '-')
				p_ang.fill_between (range(len(pf.sb[0])), np.nanmax(ang_deviations, axis=(2,1)), np.nanmin(ang_deviations, axis=(2,1)))
				p_ang.set_ylabel ('Rot. (deg)')
				devoffs = 1

			if elipses:
				p_a = pylab.subplot2grid(plotgrid,[3+devoffs,0])
				p_b = pylab.subplot2grid(plotgrid,[4+devoffs,0])
				p_theta = pylab.subplot2grid(plotgrid,[5+devoffs,0])

				p_a.set_ylabel('A (px)')
				p_b.set_ylabel('B (px)')
				p_theta.set_ylabel('Th. (deg)')

			rts2.progressbar.progress(1, stars + 1)

			for si in range(stars):
				p_x.plot (range(len(pf.sb[si])), np_sb[si,:,0] - a_x[si], '-')
				p_y.plot (range(len(pf.sb[si])), np_sb[si,:,1] - a_y[si], '-')
				p_dist.plot (range(len(pf.sb[si])), a_dist[si] - dist[si], '-')
				if elipses:
					p_a.plot (range(len(pf.sb[si])), np_sb[si,:,3], '-')
					p_b.plot (range(len(pf.sb[si])), np_sb[si,:,4], '-')
					p_theta.plot (range(len(pf.sb[si])), np.degrees(np_sb[si,:,5]), '-')

				rts2.progressbar.progress(si + 1, stars + 1)

			pylab.tight_layout()

			rts2.progressbar.progress(stars + 1, stars + 1)

			if saveplot is not None:
				print _('saving plots to {0}').format(saveplot),
				pylab.savefig(saveplot)
				print _('done')

			if plot:
				pylab.show()

			pylab.close(fig)

		if stars > 1 and max_angle < max_deviation:
			sys.exit(_('allowed angle deviation not met, measured maximal deviation: {0:.3f}').format(max_deviation))

pf = ProcessFiles(options.stars)

for fn in options.files:
	print _('Processing {0}').format(fn)
	hdu = fits.open(fn, mmap=True)

	if options.verbose:
		hdu.info()
		if options.verbose < 2:
			rts2.progressbar.progress(0, len(hdu[0].data))
	if hdu[0].header['NAXIS'] == 2:
		if options.cube:
			sys.exit(_("File {0} data have only {1} dimensions, not a cube").format(fn,hdu[0].data.ndim))

		d_x = len(hdu[0].data)
		c_x = d_x / 2.0
		d_y = len(hdu[0].data[0])
		c_y = d_y / 2.0
	else:
		options.cube = True
		print _('Detected cube image, switching to cube mode')
		d_x = hdu[0].header['NAXIS1']
		c_x = d_x / 2.0
		d_y = hdu[0].header['NAXIS2']
		c_y = d_y / 2.0

	if options.verbose:
		print _('dim {0} {1} center {2} {3}').format(d_x, d_y, c_x, c_y)

	if options.cube:
		for ci in range(hdu[0].header['NAXIS3']):
			ret = pf.process_file(fn, hdu, options.verbose, options.useDS9, options.stars, options.radius, options.skip_clouds, options.center_radius, options.split, ci)
			if ret == -1:
				# split graphs
				pf.done(options.verbose, options.stars, options.max_angle, options.plot, options.saveplot, options.stars_plot, options.elipses)
				pf = ProcessFiles(options.stars)

	else:
		pf.process_file(fn, hdu, options.verbose, options.useDS9, options.stars, options.radius, options.skip_clouds, options.center_radius, options.split)

	if options.cube:
		pf.done(options.verbose, options.stars, options.max_angle, options.plot, options.saveplot, options.stars_plot, options.elipses)

pf.done(options.verbose, options.stars, options.max_angle, options.plot, options.saveplot, options.stars_plot, options.elipses)
