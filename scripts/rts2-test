#!/usr/bin/env python

from __future__ import print_function

import rts2.rtsapi
import xml.etree.ElementTree as ET
import argparse
import numpy

parser = argparse.ArgumentParser(description='Configuration file driven tests for various RTS2 subsystems')
parser.add_argument('-v', help='increase verbosity', dest='verbose', action='count')
parser.add_argument('testfile', help='test file', type=argparse.FileType('r'))

args = parser.parse_args()

et = ET.ElementTree(file=args.testfile)

tr = et.getroot()

j = rts2.rtsapi.createProxy(tr.attrib['hostname'], tr.attrib['login'], tr.attrib['password'])

def test_image(camname, dark, exposure, expected, deviation):
    j.setValue(camname, 'EXPOSURE', exposure)
    j.setValue(camname, 'IMAGETYP', 1 if dark else 0)
    if args.verbose:
        print('{0:>4s} taking {1} second {2} exposure'.format(camname, exposure, 'dark' if dark else 'object'))
    data = j.takeImage(camname)
    if args.verbose:
        print('average {0:.1f} expected {1:.1f} allowed deviations {2}'.format(numpy.average(data), expected, deviation))
    if deviation[-1] == '%':
    	assert(100 * abs((numpy.average(data) / expected) - 1) < float(deviation[:-1]))
    else:
    	assert(abs(numpy.average(data) - expected) < float(deviation))

for child in tr:
    if child.tag == 'exposure':
        test_image(child.attrib['camera'], child.attrib['type'] == 'dark', float(child.attrib['exposure']), float(child.attrib['average']), child.attrib['deviation'])
