
2013-09-15: NOTICE: rts2af will be phased out soon and replaced by rts2saf


Installation and testing of rts2af autofocuser
==============================================
2012-07-20, Markus Wildi, wildi.markus@bluewin.ch

An overview and further information about the online image processing 
and configuration can be found with command

man rts2_imgp_analysis





Installation
------------

Update to Python 2.7.x (mandatory)


Assuming you did the the following RTS2 svn checkout

  cd ~
  svn co https://rts-2.svn.sf.net/svnroot/rts-2/trunk/rts-2 rts2

  Environment PATH and PYTHONPATH
  -------------------------------
  vi ~/.bashrc

  insert:

  export PATH=/your/home/rts2/scripts:/home/wildi/rts2/scripts/rts2af:$PATH
  export PYTHONPATH=/your/home/rts2/scripts:/your/home/rts2/scripts/rts2af:$PYTHONPATH

  source ~/.bashrc

  Repeat that for user root.

  Configuration files
  -------------------
  
  cd ~/rts2/conf
  sudo cp -a rts2af /etc/rts2/

  Edit in /etc/rts2/rts2af/rts2af-acquire.cfg all entries beginning with YOUR_* .
  
  Postgres DB tables target and scripts entries
  ---------------------------------------------

  psql --user YOUR_USERNAME YOUR_DB # (see /etc/rts2/rts2.ini)
  insert into targets values ('5', 'o', 'OnTargetFocus', null, null, 'this target does not change the RA/DEC values', 't', '1');
  insert into scripts values ('5', 'YOUR_CAMERA_NAME', ' exe /YOUR/HOME/rts2/scripts/rts2af/rts2af_acquire.py'); #(see /etc/rts2/devices)

  SEL (selector) configuration
  ----------------------------
  Replace the default in /etc/rts2/services with

  selector        SEL    --add-queue plan --add-queue focusing --add-queue manual

  Test with dummy devices (recommended)
  -------------------------------------
  In file /etc/rts2/devices add dummy devices  	

   focusd dummy  F0
   camd    dummy C0  --focdev FOC_FLI --wheeldev FTW_FLI --filter-offsets 1644:1472:1346:1349:1267:0:701
   filterd dummy W0  -F "U:B:V:R:I:X:H"
   teld    dummy T0

  if they are not present (options -F and  --filter-offsets are not really necessary). 

  Adding the devices to the Postgres DB is usually done by script 
  rts2/scripts/ubuntu-rts2-install, in case not use:

    cd src/sql/
    ./rts2-configdb stars -t T0
    ./rts2-configdb stars -c C0
    ./rts2-configdb stars -f W0


Testing offline
---------------

  Test scripts and image data are provided:

  sudo chgrp YOUR_GROUP /var/log/rts2-debug
  cd ~
  cd rts2/scripts/rts2af/test/focus
  wget http://azug.minpet.unibas.ch/~wildi/rts2af-test-focus-2012-07-20.tgz
  tar zxvf rts2af-test-focus-2012-07-20.tgz
  cd ../..

  Execute the scripts beginning with run_* . A minimal help text
  is printed on terminal, mainly saying where the log files are
  stored.

  Step 1: run_rts2af_fits.sh
  --------------------------
  ./run_rts2af_fits.sh tests rts2af_fits.py fitting with data from files.

  Step 2: run_rts2af_analysis.sh
  -----------------------------
  ./run_rts2af_analysis.sh tests rts2af_analysis.py, SExtractor and rts2af_fits.py and performs 
  the whole analysis with real images. The SExtractor configuration files must be in place 
  (normally in /etc/rts2/rts2af/sex).

  Step 3: run_rts2af_offline.sh
  -----------------------------
  run_rts2af_offline.sh tests rts2af_offline.py.
  

Testing through RTS2, night- and daytime
----------------------------------------
  Preparation
  -----------
  After all offline tests ended successfully then you can continue with online testing.
  You need to define at the time you observe at least one visible target (e.g. with tar_id 2000) in the Postgres DB.
  Then:

  A) Test at nighttime, clear sky
  -------------------------------

   Step 1: through rts2-mon
   ------------------------
   rts2-mon
   SEL  -> selector_enabled=false
   EXEC -> auto_loop=false       # you restart the process if necessary

   EXEC -> now YOUR_TAR_ID       # mount moves to commanded location, once reached, and ev. the default exposure has been 
                                 # (see rts2.ini) finished then continue
   EXEC -> now 5                 # tar_id 5 has been defined in the previous step and does not change target location.


  B) Test during daytime
  ----------------------
  Before you execute the above commands during daytime add to configuration file
  /etc/rts2/rts2af/rts2af-acquire.cfg

   [basic]
   ...
   test_acquire=True

  There two possibilities during daytime.

   Step 1: rts2-scriptexec
   -----------------------

   cd rts2/scripts/rts2af/test
   rts2-scriptexec -d C0 -s ' exe ../rts2af_acquire.py ' 

   If the test images are in place the whole acquire/analysis/fit/set cycle is teseted.
   If not rts2af_feedback_acquire.py is called and analysis/fit remains untested. It does 
   not really fit the data, since the images contain only  random noise, but send a plausible 
   set of formatted data to rts2af_acqure.py.

   Step 2: through rts2-mon
   ------------------------
   In addition to the above commands A.1) set   

    EXEC -> ignore_day=true       # during daytime, only the very rts2af_acquire.py functionality can be verified, see
                                  # rts2af_feedback_acquire.py below 
    at the beginning.

  Do not forget to set test_acquire=False after success.

Files in directory rts2/scripts/rts2af
--------------------------------------

  Documentation
  -------------
  README       This file.

  Regular scripts
  ---------------
  rts2af_fwhm.py           called by imgp_analysis.py after image has been stored on disk
  rts2af_acquire.py        defined as script for target with tar_id 5 (OnTargetFocus)

  rts2af_offline.py        performs offline analysis on sets of focus images       

  Helper scripts
  --------------
  rts2af-queue                    called by rts2af_fwhm.py in case a focus run is necessary
  rts2af_analysis.py              performs focuser image analysis 
  rts2af_fit.py                   fits resulting data 
  rts2af_print_exposure_times.py  calculates the exposure times based on the actual configuration

  Test scripts
  ------------
  rts2af_feedback_acquire.py  is used in absence of real (sky) images, if TEST_ACQUIRE=True

  Library
  -------
  rts2af.py               

  Not yet of general interest
  --------------------------            
  rts2af_fwhm_model.py     
  rts2af_model_extract.py    analyzes huge sets of focus images in order to     
  rts2af_model_analyze.py    create a temperature dependency for online position correction
