Introduction
============
Status 2013-10-12:
------------------
This description is not yet meant to be complete.

The documentation describes so far the installation and the test 
procedure if RTS2 is configured with its dummy devices.  

The integration of rts2saf into RTS2 is partly done.

rts2af is phased out and deleted from the RTS2 svn repo..

Open issues
-----------

1) target selection for focus run: the focus run is carried out at the 
   current telescope position
2) finding the appropriate exposure 
3) further, e.g. faster methods to determine the FWHM minimum: currently 
   about 6...8 images are taken see e.g. Petr's script focusing.py
4) Many ToDos in the code
5) more documentation (this file)
6) man pages


Overview
--------
This is the description of the rts2saf auto focuser package.
The latest version is available at the RTS2 svn repo:
http://sourceforge.net/p/rts-2/code/HEAD/tree/trunk/rts-2/scripts/rts2saf/
including this description.

In case of questions, or if you need support, contact the author.

rts2saf is a complete rewrite of rts2af.  The goals were
0) a comprehensive command line user interface including sensible log messages,
1) simpler installation and configuration, 
2) a general solution for all RTS2 driven observatories,
3) the support of multiple filter wheels with an arbitrary number of slots,  
4) a modular software design which eases testing of its components.

rts2saf's main tasks are to determine the focus and set FOC_DEF
during autonomous operation whenever the FWHM of an image exceeds 
a threshold.
Depending on the actual configuration it measures filter focus offsets 
relative to an empty or a predefined slot and writes these values
to the CCD driver.
In addition it provides a tool to analyze previous focus runs offline 
e.g. in order to create a temperature model.

rts2saf makes use of RTS2's HTTP/JSON interface and hence using the scripts  
on the command line is at first encouraged. The execution with 
rts2-scriptexec -s ' exe script ' is not needed any more. The JSON interface 
eases and speeds up the test phase considerably specially in the early stage
of debugging the configuration.

Test runs can be carried during day time either with RTS2
dummy or real devices. If no real images can be taken, either 
because a dummy CCD is in use or the real CCD is at the moment
not capable, "dry fits files" are injected while optionally all involved 
devices operate as if it were night. These files can be images from 
a former focus run or if not available samples are provided by the 
author (see below).

All device or analysis properties are kept in a single configuration file. 
Parameters, like e.g. FOC_DEF stored in focuser device, are retrieved 
from the running RTS2 instance as far as they are needed. The number of
additional parameters stored in the configuration is intentionally
kept small.

Modes of operations, involved scripts
-------------------------------------

1) autonomous operations:
   imgp_analysis.py, rts2saf_fwhm.py, rts2saf_focus.py

2) command line execution, measurements at night, day time testing:
   rts2saf_focus.py

3) offline analysis:
   rts2saf_analysis.py

Overview configuration file and command line arguments
------------------------------------------------------

All scripts have on line help and all arguments have a decent
default value which enables them to run in autonomous mode
where appropriate.

In addition the configuration file contains all observatory
specific values which are not available from the running
RTS2 instance. An example:

[filter properties]
flt1 = [ R, -10, 10, 2, 1.1]
 
This line specifies a filter named 'R'. The numbers -10,10 define
the range the focuser scans in steps of 2, that means ca. 10 images
are taken. The last number is the factor by which the base exposure
time is multiplied (because the filter absorbs light).


Overview autonomous operations
------------------------------

Once an image has been stored on disk RTS2 calls imgp_analysis.py
which carries out two tasks:

1) measurement of FWHM using sextractor
2) astrometrical calibration using astrometry.net

If the measured FWHM is above a configurable threshold rts2saf_fwhm.py
triggers an on target focus run using selector's focus queue. This 
target is soon executed and rts2saf_focus.py acquires a configurable set  
of images at different focuser positions. To reduce elapsed time the
images are processed in a thread by sextractor while images are
acquired. rts2saf then fits these points and the minimum is derived 
from the fitted function. If successful it sets focuser's FOC_DEF.

Overview command line execution operations
------------------------------------------

In order to simplify the debugging of one's own configuration 
all scripts can be used directly on the command line either
with or without 'dry fits files' or with previously acquired
focus runs to perform offline analysis.

Focus runs come in two flavors:

1) 'regular'
2) 'blind'

Regular runs can be carried either in aunonomous mode or on the
command line while blind runs are typically executed only on the
command line.

If you don't know where the focus edit rts2saf.cfg and then execute 

  rts2saf_focus.py  --toconsole --blind

Normaly the fit convergences but is often meaningless. Therefore
an estimator based on the weighted mean is the best guess. These
values appear as 

analyze:   258: weighted mean derived from sextracted objects
analyze:   286: weighted mean derived from FWHM
analyze:   305: weighted mean derived from std(FWHM)
analyze:   342: weighted mean derived from Combined

on the console. Under normal circumstances the 'weighted mean derived from Combined'
is the closest approximation of the true value.


Installation and testing of rts2saf autofocuser
===============================================

Prerequisites
-------------

Update to Python 2.7.x (mandatory) and various Python packages:

1) DS9 from http://hea-www.harvard.edu/RD/ds9/site/Home.html
2) numpy, numpy-devel
3) pip install astropy

During RTS2 installation the rts2saf executable are installed to 

  /usr/local/bin 

and the modules to

  /usr/local/lib/python2.7/dist-packages/rts2saf/

In case you modify a rts2saf module issue

  cd ~/rts-2/scripts
  sudo make install


Configuration file
------------------

Save  /etc/rts2/devices and replace it with the dummy devices
 
  cd ~/rts-2b/conf/
  sudo mkdir -p /usr/local/etc/rts2/
  sudo cp -a rts2saf /usr/local/etc/rts2/
  cd /etc/rts2/
  mv devices devices.save
  ln -s /usr/local/rts2saf/devices-dummy-one-filter-wheel devices

Edit in /usr/local/etc/rts2/rts2af/rts2saf.cfg (see below) and check if 
sextractor binary is found.

Postgres DB tables target and scripts entries
---------------------------------------------

  psql --user YOUR_USERNAME YOUR_DB # (see /etc/rts2/rts2.ini)
  insert into targets values ('5', 'o', 'OnTargetFocus', null, null, 'this target does not change the RA/DEC values', 't', '1');
  insert into scripts values ('5', 'YOUR_CAMERA_NAME', ' exe /YOUR/HOME/rts-2/scripts/rts2saf/rts2saf_focus.py');


Adding the devices to the Postgres DB is usually done by script 
rts2/scripts/ubuntu-rts2-install, in case not execute as user postgres:

   cd src/sql/
   ./rts2-configdb stars -t T0
   ./rts2-configdb stars -c C0
   ./rts2-configdb stars -f W0

The filters are stored in the Postgres DB table filters. These entries are not strictly necessary 
but it is recommended to add them.



Testing with dummy devices
==========================

For the following description I assume you did

  cd ~
  svn co https://rts-2.svn.sf.net/svnroot/rts-2/trunk/rts-2 rts-2

All scripts have their own log file which is written by default to . or /tmp. 
The log file name is 'script_name.log', e.g. rts2saf_focus.log. While
executing the scripts directly on the command line enable logging to terminal with the 
option --toconsole and if more detailed output is required enable --debug
or --verbose if available. 


In directory ~/rts-2/scripts/rts2saf/configs

   | dummy-bootes-2
   |   devices
   |   rts2saf.cfg
   | dummy-bootes-2-autonomous
   |   devices
   |   rts2saf.cfg
   | no-filter-wheel
   |   devices
   |   rts2saf.cfg
   | one-filter-wheel
   |   devices
   |   rts2saf.cfg
   | one-filter-wheel-autonomous
   |   devices
   |   rts2saf.cfg

you'll find four sets of rts2saf configuration files with their
associated device files. The postfix '-autonomous' denotes configurations
which are used while rts2saf is integrated in RTS2.

In the following section the unchanged rts2saf.cfg example 'one-filter-wheel' 
is used.


RTS2 configuration
------------------

In file /etc/rts2/devices add dummy devices (at least these entries)  	

  #device	type	device_name	options
  #
  camd	dummy	C0	--wheeldev W0  --filter-offsets 1:2:3:4:5:6:7:8  --focdev F0 --width 400 --height 500 
  filterd	dummy	W0	-F "open:R:g:r:i:z:Y:empty8" -s 10 --localhost localhost
  focusd	dummy	F0      

or copy configs/one-filter-wheel/devices to /etc/rts2

This is a configuration with a CCD, one filter wheel and bunch of filters. 


Command line execution, day time testing with 'dry fits files'
--------------------------------------------------------------

Start RTS2 

 /etc/init.d/rts2 start

and check if all devices appeared. Fetch the sample focus run files, these
are the dry fits files, with

  cd ~/rts-2/scripts/rts2saf
  wget http://azug.minpet.unibas.ch/~wildi/rts2saf-test-focus-2013-09-14.tgz
  tar zxvf rts2saf-test-focus-2013-09-14.tgz

Check first if the configured devices are present

  cd ~/rts-2/scripts/rts2saf/
  ./rts2saf_focus.py --toconsole --check

and if no errors are reported

  ./rts2saf_focus.py --toconsole --dryfitsfiles  ./samples/  --exp 1.

A lot of messages appear on the terminal...

If you want to see the fitted minimum and the selected objects:

   cd ~/rts-2/scripts/rts2saf/
   rts2saf_analyze.py --toconsole --basepath ./samples/ --displayfit --displayds9

After a while a matplotlib window appears containing the fit. After closing it 
a DS9 window appears showing which stars have been chosen.


Command line execution, day time testing
----------------------------------------

Execute 

  rts2saf_focus.py 

and change the terminal and watch the log file

  tail -f /tmp/rts2saf_focus.py.log

The dummy CCD provides only "noisy" FITS files and no analysis
is carried out.


Command line execution, night time
----------------------------------

Execute 

  rts2saf_focus.py --toconsole --displayfit --displayds9

and after a while the matplotlib window opens and after closing
it the DS9 window.

RTS2 integration
================

RTS2 environment test
---------------------

To make sure that the rts2saf_focus.py is executable within RTS2 environment use: 

  cd ~/rts-2/scripts/rts2saf/
  rts2-scriptexec -d C0 -s ' exe ./rts2saf_focus.py '

and check the log file /tmp/rts2saf_focus.py.log in case the results are not
what you are expecting.

To see script imgp_analysis.py working use:

  cd ~/rts-2/scripts/rts2saf/
  ../imgp_analysis.py  samples/20071205025911-725-RA.fits

The output goes to /var/log/rts2-debug.

Integration of rts2saf
----------------------

In /etc/rts2/rts2.ini section
 [imgproc]
 astrometry = "/your/path/to/imgp_analysis.py"

add the above line and if it is not installed on $PATH add its path to $PATH.

imgp_analysis.py calls rts2saf_fwhm.py which measures the FWHM of
each image after it has been stored on disk. If FWHM is above threshold it 
writes tar_id 5 into selector's focusing queue. Next executed target will 
be tar_id 5 that's 'OnTargetFocus'.


rts2-selector configuration
---------------------------

Configure selector (SEL), replace the default in /etc/rts2/services with

  selector        SEL    --add-queue plan --add-queue focusing --add-queue manual


Testing individual components
-----------------------------
soon

