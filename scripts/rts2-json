#!/usr/bin/env python
#
# Minimalistics JSON client
#
# (C) 2014-2016 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import sys
import urllib
import rts2.json
import time

import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description='Simple Python script to demonstrate RTS2 JSON API\nReturn:\n\t0 on success, 1 on failure. Errors are not reported - you must enable their reporting with --verbose.\n\nExample use:\n\n\trts2-json -G C0.infotime -G C0.exposure\n\trts2-json --server http://example.rts2.org:8889 -G C0.infotime\n\trts2-json -s C0.exposure=10\n\trts2-json --create-target Test 12.34 45.67\n\trts2-json --create-tle-target "Test sat" "1 19448U 88076D   02255.52918163 -.00000002  00000-0  10000-3 0  4873" "2 19448  65.7943 338.1906 7142558 193.4853 125.7046  2.04085818104610"')

parser.add_argument('--server', help='URL to RTS2 XML-RPC server', action='store', dest='server', default='http://localhost:8889')
parser.add_argument('--user', help='RTS2 web server username', action='store', dest='user', default=None)
parser.add_argument('--password', help='password for web user', action='store', dest='password', default=None)
parser.add_argument('--verbose', help='print in/out communication', action='store_true', dest='verbose', default=False)
parser.add_argument('--good-weather-and-on', help='return 1 if system is in good weather and on, ready to observe', action='store_true', dest='gw_on', default=False)
parser.add_argument('-G', help='get value from JSON server', action='append', dest='get_array')
parser.add_argument('--get-int', help='get value from JSON server as integer value', action='append', dest='get_int_array')
parser.add_argument('-s', help='set value on the RTS2', action='append', dest='set_array')
parser.add_argument('--cmd', help='run command. Device must be specified with --device option', action='append', dest='cmd_array')
parser.add_argument('--run-script', help='run script on device. Device must be specified with --device option', action='store', dest='runscript')
parser.add_argument('--kill-script', help='attempt to kill currently running script', action='store_true', dest='kill_script', default=False)
parser.add_argument('--list-minmax', help='list miminal/maximal values', action='store_true', dest='list_minmax', default=False)
parser.add_argument('--device', help='device for cmd and run-script options', action='store', dest='device')
parser.add_argument('--expose', help='start exposure on device')
parser.add_argument('--altazm', help='output line for alt-az model build', action='store', dest='altazm')
parser.add_argument('--spiral', help='run spiral offseting on telescope', action='store', dest='spiral')
parser.add_argument('--manual-altaz', help='build manual alt-az model',action='store_true', dest='manual_altaz', default=False)
parser.add_argument('--random-altaz', help='random alt-az model',action='store_true',dest='random_altaz', default=False)
parser.add_argument('--bright-random-altaz', help='random alt-az model on bright stars',action='store_true',dest='bright_random_altaz', default=False)
parser.add_argument('--path-altaz', help='build manual alt-az model along path provided as argument', action='store', dest='path_altaz', default=None)
parser.add_argument('--bright-star', help='point to bright star closest to given alt az pair', action='store', dest='bright_star', default=None)
parser.add_argument('--verify-brights', help='point to bright star closest to given alt az pair, take image, determine brightest star position, put correction for brightests star in offsets, and take another image to verify star is in center', dest='verify_brights', default=None)
parser.add_argument('--mags', help='magnitude range for BSC lookup', action='store', dest='mags', default='4.5:2')
parser.add_argument('--modelname', help='filename where model lines will be stored', action='store', dest='modelname', default='align')
parser.add_argument('--maxspiral', help='maximal number of steps in spiral', action='store', type=int, dest='maxspiral', default=500)
parser.add_argument('--imagescript', help='take image when we moved to target (RTS2 script)', action='store', dest='imagescript', default=0)

parser.add_argument('--create-target', help='create target. Target name, ra, dec and possible info must be entered as command line arguments',action='store_true',dest='create_target')
parser.add_argument('--create-tle-target', help='create TLE target. Target name, first and second line of TLE must be entered as command line arguments', action='store_true', dest='create_tle_target')
parser.add_argument('args',help='arguments for target creation',type=str,nargs='*')

parser.add_argument('--url', help='load and parse given URL. String after first ? is regarded as parameter and is escaped', action='append', dest='urls')

parser.add_argument('--push', help='print value on its updates', action='store_true', dest='push', default=False)

options = parser.parse_args()

j = rts2.json.JSONProxy(options.server, options.user, options.password, verbose=options.verbose)

__mm = map(float,options.mags.split(':'))
__mm.sort()
mag_max, mag_min = __mm

if (options.runscript or options.list_minmax) and not (options.device):
	print >>sys.stderr,'--device argument must be specified with --cmd option'
	sys.exit(1)

def get_altazm_line(telescope):
	j.refresh()
	ori = j.getValue(telescope,'ORI')
	altaz = j.getValue(telescope,'TEL_')
	offs = j.getValue(telescope,'AZALOFFS')
	return '\t'.join(map(str,[ori['ra'],ori['dec'],offs['alt'],offs['az'],altaz['alt'],altaz['az']]))

def wait_for_key(t):
	from select import select
	while t > 0:
		print "Hit enter to interrupt the sequencei within {0} seconds...\r".format(t),
		sys.stdout.flush()
		rlist, wlist, xlist = select([sys.stdin], [], [], 1)
		if rlist:
			print "Interrupted. Now either find the bright stars typing alt-az offsets, or type c to continue"
			sys.stdin.readline()
			return True
		t -= 1
	return False

def run_spiral(telescope,timeout,last_step=0,maxsteps=500):
	"""Runs spiral pointing to find the star."""

	import rts2.spiral
	import math
	s = rts2.spiral.Spiral(1,1)
	x = 0
	y = 0
	step_alt = 0.08
	step_az = 0.08
	alt=j.getValue(telescope,"TEL_",refresh_not_found=True)['alt']
	cosa = math.cos(math.radians(alt))
	step_az /= cosa
	print 'Scaling azimuth by factor {0} to {1}'.format(cosa,step_az)
	for i in range(maxsteps):
		a,e = s.get_next_step()
		x += a
		y += e
		if i < last_step:
			continue
		print 'step {0} next {1} {2} altaz {3} {4}'.format(i,x,y,x*step_alt,y*step_az)
		j.setValue(telescope, 'AZALOFFS', '{0} {1}'.format(x*step_alt,y*step_az))
		if wait_for_key(timeout):
			return i

def tel_hrz_to_equ(telescope,alt,az):
	j.refresh()
	lst = j.getValue(telescope,'LST')
	lat = j.getValue(telescope,'LATITUDE')

	ha,dec = rts2.libnova.hrz_to_equ(az,alt,lat)
	ra = (lst - ha) % 360.0
	return ra,dec

def find_bright_star(telescope,alt,az):
	import rts2.bsc
	ra,dec = tel_hrz_to_equ(telescope,alt,az)
	lst = j.getValue(telescope,'LST')
	print 'Looking for star around RA {0:3} DEC {1:2} (LST {2:3}), magnitude {3} to {4}'.format(ra,dec,lst,mag_max,mag_min)
	# find bsc..
	bsc=rts2.bsc.find_nearest(ra,dec,mag_max,mag_min)
	print 'Found BSC #{0} at RA {1} DEC {2} mag {3}'.format(bsc[0],bsc[1],bsc[2],bsc[3])
	return bsc


def run_manual_altaz(telescope,alt,az,timeout,modelname,maxspiral,imagescript,mn):
	if maxspiral >= -1:
		print 'Next model point at altitude {0} azimuth {1}'.format(alt,az)
		bsc = find_bright_star(telescope,alt,az)
		tarf_ra = bsc[1]
		tarf_dec = bsc[2]
	else:
		tarf_ra,tarf_dec = tel_hrz_to_equ(telescope,alt,az)

	j.executeCommand(telescope, 'move {0} {1}'.format(tarf_ra,tarf_dec))
	time.sleep(2)
	j.refresh(telescope)
	tmout = 120
	while tmout > 0 and j.getState(telescope) & 0x01000020 == 0x01000000:
		j.refresh(telescope)
		tel=j.getValue(telescope,'TEL')
		hrz=j.getValue(telescope,'TEL_')
		print 'moving to {0:2} {1:3}...at {2:3} {3:2} HRZ {4:1} {5:1}\r'.format(tarf_ra,tarf_dec,tel['ra'],tel['dec'],hrz['alt'],hrz['az']),
		sys.stdout.flush()
		time.sleep(1)
		tmout -= 1

	if tmout <= 0:
		print 'destination not reached, continue with new target                         '
		return None

	print 'moved to {0:2} {1:3}...at {2:3} {3:2} HRZ {4:1} {5:1}                      '.format(tarf_ra,tarf_dec,tel['ra'],tel['dec'],hrz['alt'],hrz['az'])
	if imagescript is not None:
		print 'taking script {0}'.format(imagescript)
		fn = 'model_{0:03}.fits'.format(mn)
		os.system("rts2-scriptexec -d C0 -s '{0}' -e '{1}'".format(imagescript,fn))
		try:
			d.set('file {0}'.format(fn))
		except Exception,ex:
			d = ds9.ds9()
			d.set('file {0}'.format(fn))
		return fn
	print 'Move finished, starting search now'
	next_please = False
	last_step = 0
	while next_please == False:
		skip_spiral = False
		if last_step <= 0:
			j.setValue(telescope,'AZALOFFS','0 0')
			skip_spiral = wait_for_key(7)
			last_step = 0
		if skip_spiral == False:
			last_step = run_spiral(telescope,timeout,last_step,maxspiral)
		while True:
			print 'Now either type offsets (comulative, arcmin), m when star is centered, r to repeat from 0 steps, z to zero offsets, or s to skip this field and hit enter'
			ans = sys.stdin.readline().rstrip()
			if ans == '':
				continue
			elif ans == 'm':
				modline = get_altazm_line(telescope)
				if modelname is None:
					print 'model line {0}'.format(modline)
					break
				print 'adding to aling file {0}'.format(modline)
				oa = open(modelname,'a')
				oa.write('{0}\t{1}\n'.format(mn,modline))
				oa.flush()
				oa.close()
				mn += 1
				next_please = True
				break
			elif ans == 's':
				next_please = True
				print 'skipping this field, going to the next target'
				break
			elif ans[0] == 'r':
				ls = ans.split()
				try:
					if len(ls) == 2:
						last_step -= int(ls[1])
					else:
						last_step = 0
					break
					print 'going back to step {0}'.format(last_step)
				except Exception,ex:
					print 'invalid r command format: {0}'.format(ans)
					continue
			elif ans == 'c':
				print 'continuing..'
				last_step -= 1
				break
			elif ans == 'z':
				print 'zeroing offsets'
				j.setValue(telescope,'AZALOFFS','0 0')
				break
			try:
				azo,alto = ans.split()
				print 'offseting ALT {0} AZ {1} arcmin'.format(azo,alto)
				j.executeCommand(telescope,'X AZALOFFS += {0} {1}'.format(float(azo)/60.0,float(alto)/60.0))

			except Exception,ex:
				print 'unknow command {0}, please try again'.format(ans)
	return None


def run_manual_path(telescope,timeout,path,modelname='align',maxspiral=500,imagescript=None):
	import rts2.libnova
	import os
	import ds9
	d = ds9.ds9()

	mn = 1

	#for p in rts2.altazpath.random_path():
	#for p in rts2.altazpath.constant_path([30,45,75]):
	for p in path:
		run_manual_altaz(telescope,p[0],p[1],timeout,modelname,maxspiral,imagescript,mn)

		mn += 1

def run_verify_brigths(telescope,timeout,alt,az,imagescript):
	# run exposure..
	import rts2.brights
	fn = run_manual_altaz(telescope,timeout,alt,az,None,-1,imagescript)
	ra_off,dec_off,alt_off,az_off = rts2.brights.add_wcs(fn, 0.33, 90, 'X', 2, False, True, '/tmp/wcs.fits')
	print 'Will offset by altaz {0:.3f} {1:.3f} arcsec'.format(alt_off * 3600, az_off * 3600)
	j.setValue('AZALOFFS','{0} {1}'.format(az_off, alt_off))

try:
	if options.get_array:
		for g in options.get_array:
			device,value = g.split('.')
			print j.getValue(device, value, refresh_not_found=True)
	if options.get_int_array:
		for g in options.get_int_array:
			device,value = g.split('.')
			print int(j.getValue(device, value, refresh_not_found=True))
	if options.set_array:
		for s in options.set_array:
			variable,value = s.split('=')
			device,name = variable.split('.')
			j.setValue(device, name, value)
	if options.cmd_array:
		if not (options.device):
			print >>sys.stderr,'--device argument must be specified with --cmd option'
			sys.exit(1)
		for g in options.cmd_array:
			print 'executing command ', g, ':', j.loadJson('/api/cmd', {'d':options.device, 'c':g})
	if options.list_minmax:
		for v in j.getDevice(options.device, refresh_not_found=True):
			if j.getVariable(options.device, v)[0] & rts2.json.RTS2_VALUE_MMAX:
				print '{0}.min ='.format(v)
				print '{0}.max ='.format(v)
	if options.altazm:
		print get_altazm_line(options.altazm)
	if options.spiral:
		run_spiral(options.spiral,7)	
	if options.manual_altaz:
		import rts2.altazpath
		run_manual_altaz('T0',7,rts2.altazpath.constant_path([45,75]),options.modelname,options.maxspiral,options.imagescript)
	if options.random_altaz:
		import rts2.altazpath
		run_manual_altaz('T0',7,rts2.altazpath.random_path(),options.modelname,-2,options.imagescript)
	if options.bright_random_altaz:
		import rts2.altazpath
		run_manual_altaz('T0',7,rts2.altazpath.random_path(),options.modelname,options.maxspiral,options.imagescript)
	if options.path_altaz:
		run_manual_altaz('T0',7,map(lambda x:map(float,x.split(':')),options.path_altaz.split(',')),options.modelname,options.maxspiral,options.imagescript)
	if options.bright_star:
		alt,az=map(float,options.bright_star.split(':'))
		bsc = find_bright_star('T0',alt,az)
		j.executeCommand('T0','move {0} {1}'.format(bsc[1],bsc[2]))
	if options.verify_brights:
		alt,az=map(float,options.verify_brights.split(':'))
		run_verify_brigths('T0',7,alt,az,options.imagescript)
	if options.runscript:
		print 'running script', options.runscript, j.loadJson('/api/runscript', {'d':options.device, 's':options.runscript, 'kill': 1 if options.kill_script else 0})

	if options.urls:
		for u in options.urls:
			us = u.split('?')
			if len(us) > 1:
			 	prms = ''
				for p in us[1:]:
					if len(prms) > 0:
						prms += '?'
					prms += urllib.quote(p,'=&')
				url = '{0}?{1}'.format(us[0],prms)
				if options.verbose:
					print 'url',url
				print j.loadJson(url)
			else:
				print j.loadJson(us[0])

	if not(options.get_array) and not(options.get_int_array) and not(options.push) and not(options.create_target) and not(options.create_tle_target) and not(options.altazm):
	  	for a in options.args:
			try:
				a=j.loadJson(a)
			except Exception,ex:
				print 'cannot parse response for {0}:{1}'.format(a,ex)

	if options.gw_on:
		try:
			state = j.getState('centrald')
			if (state & 0x3f) < 10 and not(state & 0x80000000):
				sys.exit(0)
			else:
				sys.exit(1)
		except Exception,ex:
			sys.exit(1)

	if options.push:
		arg = []
		for a in options.args:
			entry = a.split('.')
			if len(entry) != 2:
				raise Exception('invalid argument for push: {0}'.format(a))
			arg.append((entry[0],entry[1]))
		r = j.getResponse('/api/push',args=arg)
		while True:
			print j.chunkJson(r)

	if options.create_target:
		if len(options.args) < 3 or len(options.args) > 4:
			sys.exit('the program expect 3 or 4 arguments for target creation')
		tid=j.db.createTarget(*options.args)
		print 'Created target with ID {0}'.format(tid)
	
	if options.create_tle_target:
		if len(options.args) < 3 or len(options.args) > 4:
			sys.exit('the program expect 3 or 4 arguments for target creation')
		tid=j.db.createTLETarget(*options.args)
		print 'Created target with ID {0}'.format(tid)

	sys.exit(0)

except Exception,ex:
	if options.verbose:
		import traceback
		traceback.print_exc()
	else:
		print >>sys.stderr, 'error', ex

	sys.exit(1)
