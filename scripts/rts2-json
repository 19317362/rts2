#!/usr/bin/env python
#
# Minimalistics JSON client
# (C) Petr Kubanek <petr@kubanek.net>

import sys
import urllib
import rts2.json

from optparse import OptionParser

if __name__ == '__main__':
	parser = OptionParser()
	parser.add_option('--server',help='URL to RTS2 XML-RPC server',action='store',dest='server',default='http://localhost:8889')
	parser.add_option('--user',help='RTS2 web server username',action='store',dest='user',default=None)
	parser.add_option('--password',help='password for web user',action='store',dest='password',default=None)
	parser.add_option('--verbose',help='print in/out communication',action='store_true',dest='verbose',default=False)
	parser.add_option('-G',help='get value from JSON server',action='append',dest='get_array')
	parser.add_option('--get-int',help='get value from JSON server as integer value',action='append',dest='get_int_array')
	parser.add_option('--cmd',help='run command. Device must be specified with --device otion',action='append',dest='cmd_array')
	parser.add_option('--run-script',help='run script on device. Device must be specified with --device option',action='store',dest='runscript')
	parser.add_option('--kill-script',help='attempt to kill running script',action='store_true',dest='kill_script',default=False)
	parser.add_option('--device',help='device for cmd and run-script options',action='store',dest='device')
	parser.add_option('--url',help='load and parse given URL. String after first ? is regarded as parameter and is escaped',action='append',dest='urls')

	parser.add_option('--push',help='print value on its updates',action='store_true',dest='push',default=False)

	(options,args)=parser.parse_args()

	# default authorization; changed if needed
	auth = 'user:test'
	j = rts2.json.Rts2JSON(options.server,options.user,options.password,verbose=options.verbose)

	if options.get_array:
		for g in options.get_array:
			device,value = g.split('.')
			print j.loadJson('/api/get',{'d':device})['d'][value]
	if options.get_int_array:
		for g in options.get_int_array:
			device,value = g.split('.')
			print int(j.loadJson('/api/get',{'d':device})['d'][value])
	if options.cmd_array:
		if not (options.device):
			print >>sys.stderr,'--device argument must be specified with --cmd option'
			sys.exit(1)
		for g in options.cmd_array:
			print 'executing command ',g,':',j.loadJson('/api/cmd',{'d':options.device,'c':g})
	if options.runscript:
		if not (options.device):
			print >>sts.stderr,'--device argument must be specified with --run-script option'
			sys.exit(1)
		print 'running script',options.runscript,j.loadJson('/api/runscript',{'d':options.device,'s':options.runscript,'kill': 1 if options.kill_script else 0})
	
	if options.urls:
		for u in options.urls:
			us = u.split('?')
			if len(us) > 1:
			 	prms = ''
				for p in us[1:]:
					if len(prms) > 0:
						prms += '?'
					prms += urllib.quote(p,'=&')
				url = '{0}?{1}'.format(us[0],prms)
				if options.verbose:
					print 'url',url
				print j.loadJson(url)
			else:
				print j.loadJson(us[0])

	if not(options.get_array) and not(options.get_int_array) and not(options.push):
	  	for a in args:
			try:
				a=j.loadJson(a)
			except Exception,ex:
				print 'cannot parse response for {0}:{1}'.format(a,ex)

	if options.push:
		arg = []
		for a in args:
			entry = a.split('.')
			if len(entry) != 2:
				raise Exception('invalid argument for push: {0}'.format(a))
			arg.append((entry[0],entry[1]))
		r = j.getResponse('/api/push',args=arg)
		while True:
			print j.chunkJson(r)

