#!/usr/bin/env python
#
# Minimalistics JSON client
#
# (C) 2014-2016 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import sys
import urllib
import rts2.json

import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description='Simple Python script to demonstrate RTS2 JSON API\nReturn:\n\t0 on success, 1 on failure. Errors are not reported - you must enable their reporting with --verbose.\n\nExample use:\n\n\trts2-json -G C0.infotime -G C0.exposure\n\trts2-json --server http://example.rts2.org:8889 -G C0.infotime\n\trts2-json -s C0.exposure=10\n\trts2-json --create-target Test 12.34 45.67\n\trts2-json --create-tle-target "Test sat" "1 19448U 88076D   02255.52918163 -.00000002  00000-0  10000-3 0  4873" "2 19448  65.7943 338.1906 7142558 193.4853 125.7046  2.04085818104610"')

parser.add_argument('--server', help='URL to RTS2 XML-RPC server', action='store', dest='server', default='http://localhost:8889')
parser.add_argument('--user', help='RTS2 web server username', action='store', dest='user', default=None)
parser.add_argument('--password', help='password for web user', action='store', dest='password', default=None)
parser.add_argument('--verbose', help='print in/out communication', action='store_true', dest='verbose', default=False)
parser.add_argument('--good-weather-and-on', help='return 1 if system is in good weather and on, ready to observe', action='store_true', dest='gw_on', default=False)
parser.add_argument('-G', help='get value from JSON server', action='append', dest='get_array')
parser.add_argument('--get-int', help='get value from JSON server as integer value', action='append', dest='get_int_array')
parser.add_argument('-s', help='set value on the RTS2', action='append', dest='set_array')
parser.add_argument('--cmd', help='run command. Device must be specified with --device option', action='append', dest='cmd_array')
parser.add_argument('--run-script', help='run script on device. Device must be specified with --device option', action='store', dest='runscript')
parser.add_argument('--kill-script', help='attempt to kill currently running script', action='store_true', dest='kill_script', default=False)
parser.add_argument('--list-minmax', help='list miminal/maximal values', action='store_true', dest='list_minmax', default=False)
parser.add_argument('--device', help='device for cmd and run-script options', action='store', dest='device')
parser.add_argument('--expose', help='start exposure on device')


parser.add_argument('--create-target', help='create target. Target name, ra, dec and possible info must be entered as command line arguments',action='store_true',dest='create_target')
parser.add_argument('--create-tle-target', help='create TLE target. Target name, first and second line of TLE must be entered as command line arguments', action='store_true', dest='create_tle_target')
parser.add_argument('args',help='arguments for target creation',type=str,nargs='+')

parser.add_argument('--url', help='load and parse given URL. String after first ? is regarded as parameter and is escaped', action='append', dest='urls')

parser.add_argument('--push', help='print value on its updates', action='store_true', dest='push', default=False)

options = parser.parse_args()

j = rts2.json.JSONProxy(options.server, options.user, options.password, verbose=options.verbose)

if (options.runscript or options.list_minmax) and not (options.device):
	print >>sys.stderr,'--device argument must be specified with --cmd option'
	sys.exit(1)

try:
	if options.get_array:
		for g in options.get_array:
			device,value = g.split('.')
			print j.getValue(device, value, refresh_not_found=True)
	if options.get_int_array:
		for g in options.get_int_array:
			device,value = g.split('.')
			print int(j.getValue(device, value, refresh_not_found=True))
	if options.set_array:
		for s in options.set_array:
			variable,value = s.split('=')
			device,name = variable.split('.')
			j.setValue(device, name, value)
	if options.cmd_array:
		if not (options.device):
			print >>sys.stderr,'--device argument must be specified with --cmd option'
			sys.exit(1)
		for g in options.cmd_array:
			print 'executing command ', g, ':', j.loadJson('/api/cmd', {'d':options.device, 'c':g})
	if options.list_minmax:
		for v in j.getDevice(options.device, refresh_not_found=True):
			if j.getVariable(options.device, v)[0] & rts2.json.RTS2_VALUE_MMAX:
				print '{0}.min ='.format(v)
				print '{0}.max ='.format(v)
	if options.runscript:
		print 'running script', options.runscript, j.loadJson('/api/runscript', {'d':options.device, 's':options.runscript, 'kill': 1 if options.kill_script else 0})

	if options.urls:
		for u in options.urls:
			us = u.split('?')
			if len(us) > 1:
			 	prms = ''
				for p in us[1:]:
					if len(prms) > 0:
						prms += '?'
					prms += urllib.quote(p,'=&')
				url = '{0}?{1}'.format(us[0],prms)
				if options.verbose:
					print 'url',url
				print j.loadJson(url)
			else:
				print j.loadJson(us[0])

	if not(options.get_array) and not(options.get_int_array) and not(options.push) and not(options.create_target) and not(options.create_tle_target):
	  	for a in options.args:
			try:
				a=j.loadJson(a)
			except Exception,ex:
				print 'cannot parse response for {0}:{1}'.format(a,ex)

	if options.gw_on:
		try:
			state = j.getState('centrald')
			if (state & 0x3f) < 10 and not(state & 0x80000000):
				sys.exit(0)
			else:
				sys.exit(1)
		except Exception,ex:
			sys.exit(1)

	if options.push:
		arg = []
		for a in options.args:
			entry = a.split('.')
			if len(entry) != 2:
				raise Exception('invalid argument for push: {0}'.format(a))
			arg.append((entry[0],entry[1]))
		r = j.getResponse('/api/push',args=arg)
		while True:
			print j.chunkJson(r)

	if options.create_target:
		if len(options.args) < 3 or len(options.args) > 4:
			sys.exit('the program expect 3 or 4 arguments for target creation')
		tid=j.db.createTarget(*options.args)
		print 'Created target with ID {0}'.format(tid)
	
	if options.create_tle_target:
		if len(options.args) < 3 or len(options.args) > 4:
			sys.exit('the program expect 3 or 4 arguments for target creation')
		tid=j.db.createTLETarget(*options.args)
		print 'Created target with ID {0}'.format(tid)

	sys.exit(0)

except Exception,ex:
	if options.verbose:
		import traceback
		traceback.print_exc()
	else:
		print >>sys.stderr, 'error', ex

	sys.exit(1)
