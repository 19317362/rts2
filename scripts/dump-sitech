#!/usr/bin/env python
#
# Dumps various SiTech data from serial log
#
# (C) 2017 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

from __future__ import print_function

import argparse
import time
import struct
import sys
import matplotlib
import pylab
import math
import matplotlib.dates
import matplotlib.gridspec as gridspec
import datetime
import numpy
import astropy.units
import astropy.coordinates

import gettext
gettext.install('dump-sitech')

parser = argparse.ArgumentParser(description=_(
    'Dumps data from SiTech log.\n\nExample use:\n\n\tdump-sitech track.log'))


def valid_date(d):
    try:
        return datetime.datetime.strptime(d, '%Y-%m-%dT%H:%M:%S')
    except ValueError, ve:
        try:
            return datetime.datetime.strptime(d, '%H:%M:%S')
        except ValueError, ve:
            try:
                return datetime.datetime.strptime(d, '%H:%M')
            except ValueError, ve:
                try:
                    return int(d)
                except ValueError, ve:
                    raise argparse.ArgumentTypeError(
                        _('invalid date - {0}').format(d))


def verify_plot_extra(pe):
    for x in pe:
        if x not in 'ECSTP':
            raise argparse.ArgumentTypeError(
                _('type must contain only ECSTP characters'))
    return pe


parser.add_argument(
    'files',
    help=_('Trace logs to process'),
    action='append'
)

parser.add_argument(
    '--from',
    dest='d_from',
    help=_('Date from'),
    action='store',
    type=valid_date,
    default=None
)

parser.add_argument(
    '--to',
    dest='d_to',
    help=_('Date to'),
    action='store',
    type=valid_date,
    default=None
)

parser.add_argument(
    '-d',
    dest='fdump',
    help=_('dump CSV to the file'),
    action='store',
    type=argparse.FileType('w+'),
    default=None
)

parser.add_argument(
    '--save-plot',
    dest='save_plot',
    help=_('save plot to file'),
    action='store',
    default=None
)

parser.add_argument(
    '--markers',
    help=_('markers - , for pixels, . for points, - for line, x for crosses'),
    action='store',
    dest='markers',
    default=',',
    choices=[',', '.', 'X', 'x', '-', '_', '|', 'o', '+', '1', '2', '3', '4',
             '8', '^', '<', '>', 'v', 's', 'p', 'P', '*', 'h', 'H', 'd', 'D']
)

parser.add_argument(
    '--last',
    help=_('plot only last points'),
    action='store',
    dest='last',
    default=0,
    type=int
)

parser.add_argument(
    '--axis',
    help=_('plot only give axis'),
    action='store',
    dest='axis',
    default='both',
    choices=['both', 'x', 'y', 'alt', 'az']
)

parser.add_argument(
    '-v',
    dest='verbose',
    help=_('increase verbosity'),
    action='count'
)

parser.add_argument(
    '--extra',
    dest='plot_extra',
    help=_('plot extra values([ECSTP])'),
    action='store',
    default='',
    type=verify_plot_extra
)

parser.add_argument(
    '--speed-dif',
    dest='speed_dif',
    help=_('plot speed difference'),
    action='store_true',
    default=False
)

parser.add_argument(
    '--plot',
    dest='plot',
    help=_('plot all graphs with mixed extra and error,\
 separated extra(s), or only errors'),
    action='store',
    default='mixed',
    choices=['mixed', 'separated', 'errors']
)

parser.add_argument(
    '-e',
    dest='error_limit',
    help=_('error above this value will be recorded,\
 together with distance from previous error'),
    action='store',
    default=None,
    type=int
)

parser.add_argument(
    '--error-band',
    dest='error_band',
    help=_('consider error as the same if error does \
not drop bellow -e limit for --error-band seconds'),
    action='store',
    default=200,
    type=float
)

parser.add_argument(
    '-x',
    dest='x_axis',
    help=_('X axis value. Defaults to time.'),
    action='store',
    default='time',
    choices=['time', 'az-counts', 'az-deg', 'alt-counts', 'alt-deg']
)

args = parser.parse_args()


def sitech_checksum(s, invertH):
    """Calculates sitech checksum from byte array"""
    checksum = 0
    for x in s:
        checksum = (checksum + ord(x)) & 0xFFFF
    if invertH:
        return checksum ^ 0xFF00
    return checksum


class ProcessSitech:
    """Process SiTech file. Contains methods to process file."""
    def __init__(self):
        self.positions = []
        self.commands = []
        self.last_error = None
        # positions indices of errors
        self.x_errors = []
        self.y_errors = []
        self.last_x_error = None
        self.last_y_error = None
        self.types = ['E', 'C', 'S', 'T', 'P']

    def process_A(self, f, date, do_append):
        data = f.read(41)
        address, x_pos, y_pos, x_enc, y_enc, keypad, x_bit, y_bit,\
            extra_bits, ain_1, ain_2, mclock, temperature,\
            y_worm_phase, x_last, x_err, y_last, y_err,\
            checksum =\
            struct.unpack(
                '<biiii bbbbhh IbbhhhhH',
                data
            )
        if sitech_checksum(data[:39], True) != checksum:
            sys.exit(_(
                'invalid checksum: {0:04X} expected {1:04X}'.format(
                    sitech_checksum(data[:39], True),
                    checksum)
            ))
        if do_append:
            x_type = self.types[x_last & 0x000F]
            y_type = self.types[y_last & 0x000F]
            x_val = x_last >> 4
            y_val = y_last >> 4
            self.positions.append((
                date,
                x_pos,
                y_pos,
                x_err,
                y_err,
                x_type,
                x_val,
                y_type,
                y_val
            ))
        if args.error_limit is not None:
            i = len(self.positions) - 1
            if abs(x_err) > args.error_limit:
                if self.last_x_error is None:
                    self.x_errors.append([i, None])
                self.last_x_error = i
            else:
                if self.last_x_error is not None and (
                    date -
                    self.positions[self.last_x_error][0]
                ).total_seconds() > args.error_band:
                    ts = (
                        self.positions[self.last_x_error][0] -
                        self.positions[self.x_errors[-1][0]][0]
                    ).total_seconds()
                    c = self.positions[self.x_errors[-1][0]][1]
                    a = astropy.coordinates.Angle(
                        math.pi * c / float(2**26),
                        unit=astropy.units.radian
                    )
                    print(_('Alt error from {0} \
counts {1:>9} angle {2} \
for {3:.3f} seconds').format(
                        self.positions[self.x_errors[-1][0]][0],
                        c,
                        a.to_string(unit=astropy.units.degree),
                        ts
                    ))
                    self.x_errors[-1][1] = i
                    self.last_x_error = None

            if abs(y_err) > args.error_limit:
                if self.last_y_error is None:
                    self.y_errors.append([i, None])
                self.last_y_error = i
            else:
                if self.last_y_error is not None and (
                    date -
                    self.positions[self.last_y_error][0]
                ).total_seconds() > args.error_band:
                    ts = (
                        self.positions[self.last_y_error][0] -
                        self.positions[self.y_errors[-1][0]][0]
                    ).total_seconds()
                    c = self.positions[self.y_errors[-1][0]][2]
                    a = astropy.coordinates.Angle(
                        math.pi * c / float(2**26),
                        unit=astropy.units.radian
                    )
                    print(_('Az error from {0} \
counts {1:>9} angle {2} \
for {3:.3f} seconds').format(
                        self.positions[self.y_errors[-1][0]][0],
                        c,
                        a.to_string(unit=astropy.units.degree),
                        ts
                    ))
                    self.y_errors[-1][1] = i
                    self.last_y_error = None

    def process_X(self, f, date, do_append):
        data = f.read(21)
        x_dest, x_speed, y_dest, y_speed, not_used,\
            x_bits, y_bits, checksum = struct.unpack(
                '<iIiI3bH',
                data
            )
        if sitech_checksum(data[:19], True) != checksum:
            sys.exit(_(
                'invalid checksum: {0:04X} expected {1:04X}'.format(
                    sitech_checksum(data[:19], True),
                    checksum
                )
            ))
        if do_append:
            self.commands.append([date, x_dest, y_dest, x_speed, y_speed])

    def process_Y(self, f, date, do_append):
        data = f.read(34)
        x_dest, x_speed, y_dest, y_speed, x_rate_adder, y_rate_adder,\
            x_rate_adder_t, y_rate_adder_t, checksum = struct.unpack(
                '<8iH',
                data
            )
        if sitech_checksum(data[:32], True) != checksum:
            sys.exit(_(
                'invalid checksum: {0:04X} expected {1:04X}'.format(
                    sitech_checksum(data[:32], True),
                    checksum
                )
            ))
        if do_append:
            self.commands.append([date, x_dest, y_dest, x_speed, y_speed])

    def process_file(self, fn, d_from, d_to, fdump=None):
        f = open(fn, 'rb')

        if fdump:
            # write header to csv dump
            fdump.write('A/Y/X,position date,X position,Y position,\
X error,Y error,\
X extra,X extra value(Error/Current/Supply/Temperature/PID output),\
Y extra,Y extra value(Error/Current/Supply/Temperature/PID output),\
command date,X target,Y target,X speed,Y speed\n')

        while True:
            d = f.read(17)
            if len(d) != 17:
                return self.positions, self.commands
            et, t, usec = struct.unpack('=cqq', d)

            date = datetime.datetime.utcfromtimestamp(t + float(usec) / 1e6)

            if d_from is not None and d_from.year == 1900:
                d_from = d_from.replace(
                    year=date.year,
                    month=date.month,
                    day=date.day
                )

            if d_to is not None and d_to.year == 1900:
                d_to = d_to.replace(
                    year=date.year,
                    month=date.month,
                    day=date.day
                )
                if d_to < d_from:
                    d_to += datetime.timedelta(days=1)

            if d_to is not None and date > d_to:
                return self.positions, self.commands
            do_append = d_from is None or date > d_from

            if args.verbose:
                print('{0} {1}'.format(date, et))

            try:
                if et == 'A':
                    self.process_A(f, date, do_append)
                elif et == 'X':
                    self.process_X(f, date, do_append)
                elif et == 'Y':
                    self.process_Y(f, date, do_append)
                else:
                    sys.exit(_('Unknow entry type: {0}'.format(et)))
            except ValueError, ve:
                print(ve)

            if fdump and len(self.positions) > 0 and len(self.commands) > 0:
                fdump.write('{0},{1},{2}\n'.format(
                    et,
                    ','.join(map(str, self.positions[-1])),
                    ','.join(map(str, self.commands[-1])))
                )
        f.close()
        return self.positions, self.commands


ps = ProcessSitech()

for fn in args.files:
    print(_('Processing {0}'.format(fn)))
    r_positions, r_commands = ps.process_file(
        fn, args.d_from, args.d_to, args.fdump
    )
    print(_('Retrieved {0} positions and {1} commands records').format(
        len(r_positions),
        len(r_commands)
    ))

    first = -args.last

    positions = numpy.rec.array(
        r_positions[first:],
        dtype=[
            ('date', 'datetime64[ms]'),
            ('x_pos', '>i'),
            ('y_pos', '>i'),
            ('x_err', '>i'),
            ('y_err', '>i'),
            ('x_type', '>c'),
            ('x_val', '>i'),
            ('y_type', '>c'),
            ('y_val', '>i')
        ]
    )

    if len(r_commands) == 0:
        commands = None
        bpn = 2
        print(_('Empty commands, plotting only positions'))
    else:
        commands = numpy.rec.array(
            r_commands[first:],
            dtype=[
                ('date', 'datetime64[ms]'),
                ('x_dest', '>i'),
                ('y_dest', '>i'),
                ('x_speed', '>i'),
                ('y_speed', '>i')
            ]
        )
        if args.plot == 'separated':
            bpn = 3 + len(args.plot_extra)
        elif args.plot == 'errors':
            bpn = 1
        else:
            bpn = 3
    fig = pylab.figure()

    if args.speed_dif and commands is not None:
        bpn += 1

    if args.axis == 'both':
        gs = gridspec.GridSpec(bpn * 2, 1)
    else:
        gs = gridspec.GridSpec(bpn, 1)

    def add_plot(gs, index, xaxis, ylabel):
        ret = fig.add_subplot(gs[index:index+1, 0:1], sharex=xaxis)
        if xaxis:
            ret.set_xlim(xaxis.get_xlim())
        ret.set_ylabel(ylabel)
        ret.grid(True)
        return ret

    if args.x_axis == 'time':
        p_x = [x.astype(datetime.datetime) for x in positions.date]
        if commands is not None:
            c_x = [x.astype(datetime.datetime) for x in commands.date]
    elif args.x_axis == 'az-counts':
        p_x = positions.y_pos
        if commands is not None:
            c_x = commands.y_dest
    elif args.x_axis == 'az-deg':
        p_x = [360.0 * float(y) / 2**26 for y in positions.y_pos]
        if commands is not None:
            c_x = [
                360.0 * float(y) / 2**26 for y in
                commands.y_dest
            ]
    elif args.x_axis == 'alt-counts':
        p_x = positions.x_pos
        if commands is not None:
            c_x = commands.x_dest
    elif args.x_axis == 'alt-deg':
        p_x = [360.0 * float(y) / 2**26 for y in positions.x_pos]
        if commands is not None:
            c_x = [
                360.0 * float(y) / 2**26 for y in
                commands.x_dest
            ]

    ax_current = None
    gs_index = 0

    plot_x = args.axis in ['both', 'x', 'alt']
    plot_y = args.axis in ['both', 'y', 'az']
    axis_x = None
    axis_y = None

    lines_x = []
    lines_y = []

    if plot_x and not(args.plot in ['errors']):
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt pos')
        ax_current.plot(p_x, positions.x_pos, args.markers)
        gs_index += 1

    if plot_y and not(args.plot in ['errors']):
        ax_current = add_plot(gs, gs_index, ax_current, 'Az pos')
        ax_current.plot(p_x, positions.y_pos, 'g' + args.markers)
        gs_index += 1

    if plot_x:
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt err')
        p, = ax_current.plot(
            p_x,
            positions.x_err,
            args.markers,
            label='Alt err'
        )
        gs_index += 1
        if not(args.plot in ['separated']):
            axis_x = ax_current
            lines_x.append(p)

    if plot_y:
        ax_current = add_plot(gs, gs_index, ax_current, 'Az err')
        p, = ax_current.plot(
            p_x,
            positions.y_err,
            'g' + args.markers,
            label='Az err'
        )
        gs_index += 1
        if not(args.plot in ['separated']):
            axis_y = ax_current
            lines_y.append(p)

    if plot_x and commands is not None and not(args.plot in ['errors']):
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt speed')
        ax_current.plot(c_x, commands.x_speed, args.markers)
        gs_index += 1

    if plot_y and commands is not None and not(args.plot in ['errors']):
        ax_current = add_plot(gs, gs_index, ax_current, 'Az speed')
        ax_current.plot(c_x, commands.y_speed, 'g' + args.markers)
        gs_index += 1

    if args.speed_dif and plot_x and commands is not None:
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt sp dif')
        ax_current.plot(c_x[1:], numpy.diff(
            commands.x_speed),
            'b' + args.markers
        )
        gs_index += 1

    if args.speed_dif and plot_y and commands is not None:
        ax_current = add_plot(gs, gs_index, ax_current, 'Az sp dif')
        ax_current.plot(c_x[1:], numpy.diff(
            commands.y_speed),
            'g' + args.markers
        )
        gs_index += 1

    def plot_extra(extra, label, in_axis_x, in_axis_y, color):
        global gs_index
        global ax_current
        global positions
        global lines_x
        global lines_y
        if extra in args.plot_extra:
            if plot_x:
                extra_data = positions[positions.x_type == extra]
                lab = 'Alt ' + label
                if in_axis_x is None:
                    axis = add_plot(gs, gs_index, ax_current, lab)
                    mark = 'b' + args.markers
                else:
                    axis = in_axis_x.twinx()
                    axis.set_ylabel(lab)
                    axis.spines["right"].set_position((
                        "axes",
                        1 + args.plot_extra.index(extra) * 0.1
                    ))
                    axis.yaxis.label.set_color(color)
                    mark = color + args.markers
                p, = axis.plot([
                    x.astype(datetime.datetime) for x in extra_data.date],
                    extra_data.x_val,
                    mark,
                    label=lab
                )
                lines_x.append(p)
                gs_index += 1
            if plot_y:
                extra_data = positions[positions.y_type == extra]
                lab = 'Az ' + label
                if in_axis_y is None:
                    axis = add_plot(gs, gs_index, ax_current, lab)
                    mark = 'g' + args.markers
                else:
                    axis = in_axis_y.twinx()
                    axis.set_ylabel(lab)
                    axis.spines["right"].set_position((
                        "axes",
                        1 + args.plot_extra.index(extra) * 0.1
                    ))
                    axis.yaxis.label.set_color(color)
                    mark = color + args.markers
                p, = axis.plot([
                    x.astype(datetime.datetime) for x in extra_data.date],
                    extra_data.y_val,
                    mark,
                    label=lab
                )
                lines_y.append(p)
                gs_index += 1

    plot_extra('E', 'error', axis_x, axis_y, 'y')
    plot_extra('C', 'current', axis_x, axis_y, 'k')
    plot_extra('S', 'supply', axis_x, axis_y, 'c')
    plot_extra('T', 'temperature', axis_x, axis_y, 'm')
    plot_extra('P', 'PID output', axis_x, axis_y, 'r')

    # add labels, if needed
    if axis_x is not None and len(args.plot_extra) > 0:
        axis_x.legend(lines_x, [l.get_label() for l in lines_x])
    if axis_y is not None and len(args.plot_extra) > 0:
        axis_y.legend(lines_y, [l.get_label() for l in lines_y])

    fig.subplots_adjust(hspace=0)

    if not(args.plot in ['separated']):
        fig.subplots_adjust(right=1-0.07*len(args.plot_extra))

    fig.autofmt_xdate()

    if args.save_plot is not None:
        print(_('saving plot to {0}').format(args.save_plot, end=' '))
        pylab.savefig(args.save_plot)
        print(_('done'))
    else:
        pylab.show()

    pylab.close(fig)
