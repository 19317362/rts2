#!/usr/bin/env python
#
# Dumps various SiTech data from serial log
#
# (C) 2017 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

from __future__ import print_function

import argparse
import time
import struct
import sys
import matplotlib
import pylab
import matplotlib.dates
import matplotlib.gridspec as gridspec
import datetime
import numpy

import gettext
gettext.install('dump-sitech')

parser = argparse.ArgumentParser(description=_(
    'Dumps data from SiTech log.\n\nExample use:\n\n\tdump-sitech track.log'))


def valid_date(d):
    try:
        return datetime.datetime.strptime(d, '%Y-%m-%dT%H:%M:%S')
    except ValueError, ve:
        try:
            return datetime.datetime.strptime(d, '%H:%M:%S')
        except ValueError, ve:
            try:
                return datetime.datetime.strptime(d, '%H:%M')
            except ValueError, ve:
                try:
                    return int(d)
                except ValueError, ve:
                    raise argparse.ArgumentTypeError(
                        _('invalid date - {0}').format(d))


def verify_plot_extra(pe):
    for x in pe:
        if x not in 'ECSTP':
            raise argparse.ArgumentTypeError(
                _('type must contain only ECSTP characters'))
    return pe


parser.add_argument(
    'files',
    help=_('Trace logs to process'),
    action='append'
)

parser.add_argument(
    '--from',
    dest='d_from',
    help=_('Date from'),
    action='store',
    type=valid_date,
    default=None
)

parser.add_argument(
    '--to',
    dest='d_to',
    help=_('Date to'),
    action='store',
    type=valid_date,
    default=None
)

parser.add_argument(
    '-d',
    dest='fdump',
    help=_('dump CSV to the file'),
    action='store',
    type=argparse.FileType('w+'),
    default=None
)

parser.add_argument(
    '--save-plot',
    dest='save_plot',
    help=_('save plot to file'),
    action='store',
    default=None
)

parser.add_argument(
    '--markers',
    help=_('markers - , for pixels, . for points, - for line, x for crosses'),
    action='store',
    dest='markers',
    default=',',
    choices=[',', '.', 'X', 'x', '-', '|', 'o', '+']
)

parser.add_argument(
    '--last',
    help=_('plot only last points'),
    action='store',
    dest='last',
    default=0,
    type=int
)

parser.add_argument(
    '--axis',
    help=_('plot only give axis'),
    action='store',
    dest='axis',
    default='both',
    choices=['both', 'x', 'y', 'alt', 'az']
)

parser.add_argument(
    '-v',
    dest='verbose',
    help=_('increase verbosity'),
    action='count'
)

parser.add_argument(
    '--extra',
    dest='plot_extra',
    help=_('plot extra values([ECSTP])'),
    action='store',
    default='',
    type=verify_plot_extra
)

parser.add_argument(
    '--speed-dif',
    dest='speed_dif',
    help=_('plot speed difference'),
    action='store_true',
    default=False
)

args = parser.parse_args()


def sitech_checksum(s, invertH):
    """Calculates sitech checksum from byte array"""
    checksum = 0
    for x in s:
        checksum = (checksum + ord(x)) & 0xFFFF
    if invertH:
        return checksum ^ 0xFF00
    return checksum


def process_file(fn, d_from, d_to, fdump=None):
    f = open(fn, 'rb')

    positions = []
    commands = []

    if fdump:
        # write header to csv dump
        fdump.write('A/Y/X,position date,X position,Y position,X error,Y error,\
X extra,X extra value(Error/Current/Supply/Temperature/PID output),\
Y extra,Y extra value(Error/Current/Supply/Temperature/PID output),\
command date,X target,Y target,X speed,Y speed\n')

    while True:
        d = f.read(17)
        if len(d) != 17:
            return positions, commands
        et, t, usec = struct.unpack('=cqq', d)

        date = datetime.datetime.utcfromtimestamp(t + float(usec) / 1e6)

        if d_from is not None and d_from.year == 1900:
            d_from = d_from.replace(
                year=date.year,
                month=date.month,
                day=date.day
            )

        if d_to is not None and d_to.year == 1900:
            d_to = d_to.replace(
                year=date.year,
                month=date.month,
                day=date.day
            )
            if d_to < d_from:
                d_to += datetime.timedelta(days=1)

        if d_to is not None and date > d_to:
            return positions, commands
        do_append = d_from is None or date > d_from

        if args.verbose:
            print('{0} {1}'.format(date, et))

        types = ['E', 'C', 'S', 'T', 'P']

        try:
            if et == 'A':
                data = f.read(41)
                address, x_pos, y_pos, x_enc, y_enc, keypad, x_bit, y_bit,\
                    extra_bits, ain_1, ain_2, mclock, temperature,\
                    y_worm_phase, x_last, x_err, y_last, y_err,\
                    checksum =\
                    struct.unpack(
                        '<biiii bbbbhh IbbhhhhH',
                        data
                    )
                if sitech_checksum(data[:39], True) != checksum:
                    sys.exit(_(
                        'invalid checksum: {0:04X} expected {1:04X}'.format(
                            sitech_checksum(data[:39], True),
                            checksum)
                    ))
                if do_append:
                    x_type = types[x_last & 0x000F]
                    y_type = types[y_last & 0x000F]
                    x_val = x_last >> 4
                    y_val = y_last >> 4
                    positions.append((
                        date,
                        x_pos,
                        y_pos,
                        x_err,
                        y_err,
                        x_type,
                        x_val,
                        y_type,
                        y_val
                    ))
            elif et == 'X':
                data = f.read(21)
                x_dest, x_speed, y_dest, y_speed, not_used,\
                    x_bits, y_bits, checksum = struct.unpack(
                        '<iIiI3bH',
                        data
                    )
                if sitech_checksum(data[:19], True) != checksum:
                    sys.exit(_(
                        'invalid checksum: {0:04X} expected {1:04X}'.format(
                            sitech_checksum(data[:19], True),
                            checksum
                        )
                    ))
                if do_append:
                    commands.append([date, x_dest, y_dest, x_speed, y_speed])
            elif et == 'Y':
                data = f.read(34)
                x_dest, x_speed, y_dest, y_speed, x_rate_adder, y_rate_adder,\
                    x_rate_adder_t, y_rate_adder_t, checksum = struct.unpack(
                        '<8iH',
                        data
                    )
                if sitech_checksum(data[:32], True) != checksum:
                    sys.exit(_(
                        'invalid checksum: {0:04X} expected {1:04X}'.format(
                            sitech_checksum(data[:32], True),
                            checksum
                        )
                    ))
                if do_append:
                    commands.append([date, x_dest, y_dest, x_speed, y_speed])
            else:
                sys.exit(_('Unknow entry type: {0}'.format(et)))
        except ValueError, ve:
            print(ve)

        if fdump and len(positions) > 0 and len(commands) > 0:
            fdump.write('{0},{1},{2}\n'.format(
                et,
                ','.join(map(str, positions[-1])),
                ','.join(map(str, commands[-1])))
            )
    f.close()
    return positions, commands


for fn in args.files:
    print(_('Processing {0}'.format(fn)))
    r_positions, r_commands = process_file(
        fn, args.d_from, args.d_to, args.fdump
    )

    first = -args.last

    positions = numpy.rec.array(
        r_positions[first:],
        dtype=[
            ('date', 'datetime64[ms]'),
            ('x_pos', '>i'),
            ('y_pos', '>i'),
            ('x_err', '>i'),
            ('y_err', '>i'),
            ('x_type', '>c'),
            ('x_val', '>i'),
            ('y_type', '>c'),
            ('y_val', '>i')
        ]
    )

    if len(r_commands) == 0:
        commands = None
        bpn = 2
	print(_('Empty commands, plotting only positions'))
    else:
        commands = numpy.rec.array(
	    r_commands[first:],
            dtype=[
                ('date', 'datetime64[ms]'),
                ('x_dest', '>i'),
                ('y_dest', '>i'),
                ('x_speed', '>i'),
                ('y_speed', '>i')
            ]
        )
        bpn = 3 + len(args.plot_extra)

    fig = pylab.figure()

    if args.speed_dif and commands is not None:
        bpn += 1

    if args.axis == 'both':
        gs = gridspec.GridSpec(bpn * 2, 1)
    else:
        gs = gridspec.GridSpec(bpn, 1)

    def add_plot(gs, index, xaxis, ylabel):
        ret = fig.add_subplot(gs[index:index+1, 0:1], sharex=xaxis)
        if xaxis:
            ret.set_xlim(xaxis.get_xlim())
        ret.set_ylabel(ylabel)
        ret.grid(True)
        return ret

    p_date = [x.astype(datetime.datetime) for x in positions[first:].date]
    if commands is not None:
        c_date = [x.astype(datetime.datetime) for x in commands[first:].date]

    ax_current = None
    gs_index = 0

    plot_x = args.axis in ['both', 'x', 'alt']
    plot_y = args.axis in ['both', 'y', 'az']

    if plot_x:
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt pos')
        ax_current.plot(p_date, positions.x_pos, args.markers)
        gs_index += 1

    if plot_y:
        ax_current = add_plot(gs, gs_index, ax_current, 'Az pos')
        ax_current.plot(p_date, positions.y_pos, 'g' + args.markers)
        gs_index += 1

    if plot_x:
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt err')
        ax_current.plot(p_date, positions.x_err, args.markers)
        gs_index += 1

    if plot_y:
        ax_current = add_plot(gs, gs_index, ax_current, 'Az err')
        ax_current.plot(p_date, positions.y_err, 'g' + args.markers)
        gs_index += 1

    if plot_x and commands is not None:
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt speed')
        ax_current.plot(c_date, commands.x_speed, args.markers)
        gs_index += 1

    if plot_y and commands is not None:
        ax_current = add_plot(gs, gs_index, ax_current, 'Az speed')
        ax_current.plot(c_date, commands.y_speed, 'g' + args.markers)
        gs_index += 1

    if args.speed_dif and plot_x and commands is not None:
        ax_current = add_plot(gs, gs_index, ax_current, 'Alt sp dif')
        ax_current.plot(c_date[1:], numpy.diff(
            commands.x_speed),
            'b' + args.markers
        )
        gs_index += 1

    if args.speed_dif and plot_y and commands is not None:
        ax_current = add_plot(gs, gs_index, ax_current, 'Az sp dif')
        ax_current.plot(c_date[1:], numpy.diff(
            commands.y_speed),
            'g' + args.markers
        )
        gs_index += 1

    def plot_extra(extra, label):
        global gs_index
        global ax_current
        global positions
        if extra in args.plot_extra:
            if plot_x:
                pid_data = positions[positions.x_type == extra]
                ax_current = add_plot(gs, gs_index, ax_current, 'Alt ' + label)
                ax_current.plot([
                    x.astype(datetime.datetime) for x in pid_data.date],
                    pid_data.x_val,
                    'b' + args.markers
                )
                gs_index += 1
            if plot_y:
                pid_data = positions[positions.y_type == extra]
                ax_current = add_plot(gs, gs_index, ax_current, 'Az ' + label)
                ax_current.plot([
                    x.astype(datetime.datetime) for x in pid_data.date],
                    pid_data.y_val,
                    'g' + args.markers
                )
                gs_index += 1

    plot_extra('E', 'error')
    plot_extra('C', 'current')
    plot_extra('S', 'supply')
    plot_extra('T', 'temperature')
    plot_extra('P', 'PID output')

    fig.subplots_adjust(hspace=0)

    fig.autofmt_xdate()

    if args.save_plot is not None:
        print(_('saving plot to {0}').format(args.save_plot, end=' '))
        pylab.savefig(args.save_plot)
        print(_('done'))
    else:
        pylab.show()

    pylab.close(fig)
