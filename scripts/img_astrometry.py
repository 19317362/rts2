#!/usr/bin/python
# (C) 2010, Markus Wildi, markus.wildi@one-arcsec.org
#   usage 
#   img_astrometry.py fits_filename
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software Foundation,
#   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#   Or visit http://www.gnu.org/licenses/gpl.html.
#

__author__ = 'markus.wildi@one-arcsec.org'

import os
import re
import shutil
import string
import sys
import time
import numpy
import pyfits

class astrometryNetExtensions:
    """holds all file extensions generated by astrometry.net during processing"""
    def __init__(self):
        self.extensions= ['.axy',
                     '-objs.png',
                     '.wcs',
                     '.solved',
                     '.rdls',
                     '.new',
                     '.match',
                     '-indx.xyls',
                     '.corr',
                     '-indx.png',
                     '-ngc.png']
    def removeAuxFiles( self, fits_name):
        path= os.path.splitext(fits_name)
        for extension in self.extensions:
            try:
                os.unlink( path[0] + extension)
            except:
                os.system("logger %s can not unlink %s" % (sys.argv[0],  path[0] + extension + '\n'))

    def getNewFits( self, fits_name):
        path= os.path.splitext(fits_name)
        return path[0] + self.extensions[5] 

class imgAstrometryScript:
    """calibrate a fits image with astrometry.net."""
    def __init__(self):
        self.scale_at_binning_1= 1.41
        self.scale_relative_error= 0.05
        self.down_sample= 2.

        self.fits_tmp_path= '/scratch/tmp/astrometry.fits'
        self.scale = 1. ;
        self.scale_low = 1. ;
        self.scale_high = 1. ;
        
    def prepare(self, fits_file):

        astrometryNetExtensions().removeAuxFiles( self.fits_tmp_path)
        try:
            shutil.copy (fits_file, self.fits_tmp_path)
        except:
            print "%s fits file %s not found or could not copy to %s" % (sys.argv[0], fits_file, self.fits_tmp_path)
            os.system("logger %s fits file %s not found" % (sys.argv[0], fits_file))
            sys.exit(1)

    def main(self):
        if len(sys.argv) == 1:
            print 'Usage: %s  <fits filename>' % (sys.argv[0])
            os.system("logger %s Usage: %s fits_filename" % (sys.argv[0], sys.argv[0]))
            sys.exit(1)

        self.prepare(sys.argv[1]) 
        try:
            hdulist_object= pyfits.open( self.fits_tmp_path)
        except:
            os.system("logger %s could not open temporary file %s " % (sys.argv[0], self.fits_tmp_path))
            sys.exit(1)
        try:
            imgId   = hdulist_object[0].header['IMGID']
            binning = hdulist_object[0].header['BINNING']
            objectId= hdulist_object[0].header['OBJECT']
        except:
            os.system("logger %s could not find one or more of fits key words IMGID, BINNING and OBJECT in hdulist of %s" % (sys.argv[0], self.fits_tmp_path))
            sys.exit(1)

        hdulist_object.close()

        if re.search('1x1', binning):
            self.scale= 1. * self.scale_at_binning_1
        elif re.search('2x2', binning):
            self.scale= 2. * self.scale_at_binning_1
        else:
            os.system( 'logger %s do not understand binning %s in  %s' % (sys.argv[0], binning, self.fits_tmp_path))

        scale_low = self.scale * ( 1. - self.scale_relative_error)  ;   
        scale_high= self.scale * ( 1. + self.scale_relative_error) ;

        solve_field= '/usr/local/astrometry/bin/solve-field --no-plots --no-fits2fits --no-verify --scale-units arcsecperpix --downsample %f --scale-low %f --scale-high %f %s >/dev/null 2>&1' % (self.down_sample, scale_low, scale_high, self.fits_tmp_path)

        os.system( 'logger %s begin solve-field' % (sys.argv[0]))
        os.system( solve_field) 
        os.system( 'logger %s end solve-field' % (sys.argv[0]))

        result_fits_file=  astrometryNetExtensions().getNewFits( self.fits_tmp_path)
        try:
            hdulist_object= pyfits.open( result_fits_file)
        except:
            os.system("logger %s could not open temporary file %s " % (sys.argv[0], self.fits_tmp_path))
            sys.exit(1)
        try:
            crval1 = hdulist_object[0].header['CRVAL1']
            crval2 = hdulist_object[0].header['CRVAL2']
            orira  = hdulist_object[0].header['ORIRA']
            oridec = hdulist_object[0].header['ORIDEC']
        except:
            os.system("logger %s could not find one or more of fits key words CRVAL1, CRVAL2, ORIRA, ORIDEC in hdulist of %s" % (sys.argv[0], self.fits_tmp_path))
            sys.exit(1)

        hdulist_object.close()
        os.system("logger %s return values to EXEC %d %f %f \(%f,%f\)" % ( sys.argv[0], imgId, crval1, crval2, crval1- orira, crval2- oridec)) 

        # see http://rts2.org/wiki/faq :
        # Assuming your image centre is at RA DEC 12:00:00 05:00:00 
        # and the telescope pointed to 
        #                                         12:01:00 05:01:00, 
        # the output string should be: 
        #                          1 180.0 5.0 (.2499999990 .0166666666)
        #            
        # => coord(Telescope - Image) 
        # The correction values are in units of deg
        #
        print '%d %f %f (%f,%f)' % ( imgId, crval1, crval2, orira- crval1, oridec- crval2) 
        os.system("logger %s  END\n" % (sys.argv[0]))

if __name__ == '__main__':
    imgAstrometryScript().main()
