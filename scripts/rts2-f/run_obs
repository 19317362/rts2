# expected to receive output of rts2-seltest command
# assumes rts2-f-env script was called, so important variables
# are set up

if ( -r $lasttarget ) then
	setenv last_tar_id `cut -f1 -d' ' $lasttarget`
	setenv obs_id `cut -f2 -d' ' $lasttarget`
else
	setenv last_tar_id -1
endif

# run focusing script, if last target was not focusing..
if ( $rts2_focusing_succ == 0 && $last_tar_id != 3 ) then
	set tar_id=3
	rts2-logcom "Run FWHM focus script. Abort with nabort."
else	 
	set tar_id=`$xmlrpc -G SEL.next_id`
	if ( $? != 0 ) then
		# rts2-logcom "selector is not running, executing seltest to select next targets"
		# set tar_id=`$RTS2/bin/rts2-seltest --filter-file='KCAM:/Realtime/lib/filt.dat' --filter-aliases /home/petr/rts2-sys/etc/rts2/aliases --targetid`
		# rts2-logcom "selected $tar_id"
		rts2-logcom "selector is not running!!"
		set tar_id=-1
	endif

	if ( $tar_id <= 0 ) then
		rts2-logcom "Automatic selector is not enabled. I'll wait 30 seconds, then repeat the test."
		rts2-logcom "Please fill the queues if you believe that something should be observed,"
		rts2-logcom "or allow automatic selection. Do not take any action if you believe that this"
		rts2-logcom "is fine"
	endif

	while ( $tar_id <= 0 )
		if ( -e $rts2abort ) then
			rts2-logcom "abort detected (while waiting for next tar_id)"
			exit
		endif

		$xmlrpc -c SEL.next
		set tar_id=`$xmlrpc -G SEL.next_id`
		if ( $? != 0 ) then
			rts2-logcom "selector/rts2-f is not running"
			set tar_id=-1
		endif
	
		if ( $tar_id <= 0 ) then
			rts2-logcom "waiting for 30 seconds (target not selected..)"
			sleep 30
		endif
	end
endif	

$xmlrpc -c SEL.next

if ( $last_tar_id != $tar_id ) then
	$xmlrpc -c "TELE.move $ra $dec"

	$xmlrpc -s TELE.OFFS "0 0"
	$xmlrpc -s TELE.CORR_ "0 0"

	setenv obs_id `$RTS2/bin/rts2-target --slew $tar_id`
	echo $tar_id $obs_id > $lasttarget
	@ imgid=1
	set ti=`rts2-targetinfo $tar_id`

	set name=`rts2-targetinfo --name $tar_id | sed -e 's# #_#g' -e 's#[^A-Za-z0-9+_.-]#X#g'`
	set pi=`rts2-targetinfo --pi $tar_id`
	set program=`rts2-targetinfo --program $tar_id`

	set ra=`echo $ti | awk '{ print $3 }'`
	set dec=`echo $ti | awk '{ print $4 }'`

	# for doauto script, to report in log file:
	setenv rts2obstarg $name

	rts2-logcom "Starting observation of target $name, ID $tar_id, pi $pi, program $program, observation ID $obs_id"

	set autog='UNKNOW'

	object "$name"
	setcom kepccd Object "$name"
	tele pi "$pi"
	tele program "$program"
else
	rts2-logcom "repeating script for target $name, ID $tar_id, pi $pi, program $program, observation ID $obs_id"
endif

$xmlrpc -c "SEL.observation $tar_id $obs_id"

#notmove is for debugging - testing during day
if ( $last_tar_id != $tar_id && $ra != "nan" && $dec != "nan" && $notmove != 1 ) then
	echo -n "Track on"
	tele trackon
	tele domeon
	echo -n "sending coordinates $ra $dec 2000.0 .. "
	tele coords $ra $dec 2000.0

	sleep 3

	tele enable

	echo "on coordinates"

	# mark end of slew
	$RTS2/bin/rts2-target --observe $obs_id

	rts2-logcom "marked end of telescope movement"
endif

# rts2-logcom "observing setup finished"

# translate observation to observation file..

rm -f /tmp/$obs_id

$RTS2/bin/rts2-targetinfo --parse KCAM $tar_id | xsltproc /home/petr/rts2/scripts/flwo_tcs.xsl - > /tmp/$obs_id

# rts2-logcom "script created"

source /tmp/$obs_id

# end it
$RTS2/bin/rts2-target --end $obs_id

rm -f /tmp/$obs_id

$xmlrpc -c SEL.next

#echo `date` "observation $obs_id of object $name ($ra $dec) ends"
rts2-logcom "script for observation $obs_id of object $name ($ra $dec) ends"
