#!/usr/bin/tcsh
# start automatic observing. Uses rts2-seltest to select next target, find and
# execute its script, and waits until finished before picking a new target
# Version 3.0 see file ~/RTS2-F/nrobot/rob_history for tracks
# update 6/8/15 EF updated purge queues, in doauto upon day, otherwise dawn 
#                  and also dawn during weather wait

# init variables
#unalias GOrobot   If you do these you cannot restart after Cntrl-c
# no, just if you unalias GOrobot, leave the other 2 EF 10/20/15
# gorobot would have worked also
unalias GOrobots  
unalias Gorobot
set ROBOVER="V3.0"
set MLOC=`/home/observer/RTS2-F/rts2.getMSThm -c -m`
set HLOC=`/home/observer/RTS2-F/rts2.getMSThm -c -h`
set rts2dir="/home/observer/RTS2-F"
set lastoffimage=-1
set crashandburn=0                     # flag to exit on -h arg

echo -1 -1 > $lasttarget
set tar_id=-2
set slitfile="/Realtime/lib/slit_status"
set coverfile="/Realtime/lib/cover_status"
set safeglev=40                        # safe glev, 40 for covers open
alias run_obs 'source /home/observer/rts2-sys/bin/run_obs'
alias checkslit 'source /home/observer/ROBOT/rts2.checkslit'
alias rts2-logcom 'source /home/observer/RTS2-F/rts2.logcom'
source /home/observer/rts2-sys/bin/rts2-f-env
$RTS2/bin/rts2-unabort
source $rts2dir/rts2.nabort
source $rts2dir/nrobot/rob_startifdead  #  check status now rob_startifdead 

set ignoreDAY=0
setenv notmove 2
umask 022
set firstnight=1             # set to 1, firstnight = 0 means NOT first night
set ignoreOFF=0              # set ignoreOFF=0 to skip OFF mode check
set dosky1=0                 # set dosky1 0 until we can start skyflats at dusk
set dosky2=0                 # set dosky2 0 until we can start skyflats at dawn
set skipsky1=0               # set skipsky1 0 to NOT skip PM skyflats
set skipsky2=0               # set skipsky2 0 to NOT skip AM skyflats
setenv TTsky 0              # setenv TTsky to 0 until time to take skyflats
setenv TTdome 0              # setenv TTdome to 0 if it's too late for domeflats
# Python path needed for RTS2 modules
setenv PYTHONPATH /home/petr/rts2-sys/lib/python2.6/site-packages
set slit=`cat $slitfile`     # set slit to current status
set covers="Closed"          # set covers to Closed until they are open
set domes=`source $rts2dir/rts2.domeampm` 
# set domes to 0 if no domes yet (depends on time of day).
set printoff=1               # print off message
setenv rts2_focusing_succ 0  # we haven't yet run focusing...
setenv focus_disabled 0      # focus is enabled
if ( ! (${?defoc_current}) ) set defoc_current=0 # not changed telescope focus
set reftele=1                # set flag to 1, skip tele ref unless -R:
set skipref=1
set fixpoint=0               # skip astrometry pointing fix unless -P:
set rundefoc=0               # skip dodefoc images for collimation unless -O:
set runfwhm=1
set morningstow=1            # telescope was not stowed in the morning
# NOTE THESE VARIABLES:
#  startnight=0 if not starting a new run this night (log with >0 obs exists)
#  startnight=1 if starting a new run this night (no log, or 0 obs in log)
#  firstnight=0 means night >1 of a run over multiple nights
#  firstnight=1 means the first night of a possible multiple-night run

set domefile = "$rts2dir/FLATS/DOMEFILT" # set empty name for alt domeflat list
source $rts2dir/nrobot/rob_parseargs     # now args done here'
if ( $crashandburn == 1 ) then           # exit for -h help case
   exit 1
endif
source $rts2dir/rts2.setrunlog 0         # set systate, sysmode
source $rts2dir/rts2.symodstat
# set: Syntax Error. from script above!
set oldstate=$systate
if ( $startnight == 1 ) then             # welcome message
    rts2-logcom ">>>> START RTS2-F $ROBOVER observations <<<<"
    source $rts2dir/rts2.setrunlog 1 # set runlog name for restarts 
    set printone=1
else
    source $rts2dir/rts2.setrunlog 1 # set runlog name for restarts 
    if ( $ignoreDAY ) then
	rts2-logcom "TESTING, track ON, dome OFF" 
	tele trackon
	tele domeoff
    else
	if ( $state == 3 ) then      # night state? 
	    if ( $sysmode == "ON" ) then
		rts2-logcom "MODE $sysmode, STATE $systate"
		rts2-logcom " turn track, dome ON"
		tele trackon
		tele domeon
	    endif
	else if ( ($state == 0) || ($state == 5) ) then  # 0 (day) or 5 (morn)
	    rts2-logcom "MODE $sysmode, STATE $systate, track OFF, dome OFF"
	    tele stow 
	    tele domeoff
	endif
    endif
endif

# MAIN LOOP: run forever, until CTRL-C, or jump to exit
while (1 != 0)
    if ( -e $rts2abort ) then
	rts2-logcom "STOProbot at top of RTS2-F loop"
	exit
    endif
# set current run log, numobs, startnight, argument 0 means no report
    source $rts2dir/rts2.setrunlog 0
    source $rts2dir/rts2.symodstat

    if ( ($firstnight == 0 || $startnight == 0) && $printoff != 0 ) then
	rts2-logcom ">>>> MAIN LOOP: CONTINUE RTS2-F $ROBOVER observations <<<<"
	rts2-logcom "MODE: $sysmode, STATE: $systate"
	set curstate = `rts2-state -c`
	if ( $curstate > 3) then
	    rts2-logcom "STATE: $curstate DOMES: $domes"
	endif
	set defoc_current=0
	set dosky1=0
	set dosky2=0
	set skipsky1=0
	set skipsky2=0
	set printone=1                  # print state once
# set vars to see if findfwhm will run on 2nd+ night
	echo -1 -1 > $lasttarget
	set tar_id=-2
	if ($focus_disabled == 0) then
	    setenv rts2_focusing_succ 0
	    set runfwhm=1
	    rts2-logcom ">>>> MAIN LOOP: will run findfwhm"
	else
	    setenv rts2_focusing_succ 1
	    set runfwhm=0
	    rts2-logcom ">>>> MAIN LOOP: will NOT run findfwhm"
	endif
# Challis prevention: stow first in states day, dawn & morning
	if ( ($state == 0 || $state > 3) && $morningstow == 1 ) then
	    tele stow
	    set morningstow=0
	endif
# reset domefile to default for the next night
	if ($domefile != "$rts2dir/FLATS/DOMEFILT") then
	    set domefile="$rts2dir/FLATS/DOMEFILT"
	    set DURA=`$rts2dir/rts2.domeflats-time $domefile 0`
	    rts2-logcom "DOMES: standard list, duration $DURA min"
	endif
    endif
    set canopen=0
    if ( $? != 0 || ( $sysmode != "ON" && $ignoreOFF == 0 ) ) then
	if ( $? != 0 ) then
	    rts2-logcom "MODE: unknown, STATE: $systate"
	    sleep 60
	endif
	set slit=`cat $slitfile`
	set weather_reason=`$xmlrpc -G .bad_weather_reason`
	if ( $slit == "Open" ) then
	   if ( "$weather_reason" != "" && $printoff != 0) then
		rts2-logcom "$weather_reason `date +%H:%M:%S`"
		set printoff = 0
	   endif
	   if ( $tar_id == -2 ) then
	       rts2-logcom "   Dome slit is open\!"
	       rts2-logcom "   CTRL-C to prevent closing dome slit"
	       set count=15
	       echo -n "Dome slit will close in $count seconds..."
	       while ( $count > 0 )
	   	  sleep 1
	   	  @ count--
	   	  echo -n "$count "
	       end
	       echo " "
	   endif
	   if ( "$weather_reason" != "") then
		rts2-logcom "$weather_reason `date +%H:%M:%S`"
		set printoff = 0
	   endif
	   rts2-logcom "DOME SLIT: Open, shut down"
	   source $rts2dir/rts2.shutall
	   set morningstow=0
	endif
	source $rts2dir/rts2.symodstat    # TEST for domes when MODE is not ON
	if ($printone != 0) then
	    rts2-logcom "MODE: $sysmode, STATE: $systate, $state"
	    set weather_reason=`$xmlrpc -G .bad_weather_reason`
	    if ( "$weather_reason" != "" ) then 
		rts2-logcom "$weather_reason `date +%H:%M:%S`"
		rts2-logcom "Will not open dome slit 0"
		tele domeoff
	    endif
	    set printone=0
	endif
        if (  $? != 0 || ($sysmode != "ON") ) then
	    if ( $oldstate != $systate ) then
		set oldstate=$systate
		set printoff=1
	    endif
# domeampm checks whether domes are done, sets domes 1/0 (done/not done)
	    set domes=`source $rts2dir/rts2.domeampm` # 
	    if ( $domes == 0 ) then
		if ($printoff != 0) then
		    rts2-logcom "DOMES: NOT done"
		    set printoff=0
		endif
# wait for dome flat time except dusk & night
		if ($systate != "dusk" && $systate != "night") then
		    source $rts2dir/rts2.domeflattimeWait $domefile
		endif
		if ($TTdome) then
		    source $rts2dir/rts2.domeflats-time $domefile
		    tele glev $safeglev
		    source $rts2dir/rts2.domeflats-list $domefile
		    source $rts2dir/rts2.checkbias # check report bias levels
		    set domes=`source $rts2dir/rts2.domeampm`
		    if ( $domes == 1 ) then
			setenv TTdome 0
			set printoff=1
		    endif
		    set weather_reason=`$xmlrpc -G .bad_weather_reason`
		    rts2-logcom "$weather_reason"
		    rts2-logcom "Will not open dome slit 1"
		    tele domeoff
		    continue
		else
		    if ( -e $rts2abort ) then
			rts2-logcom "STOProbot called"
			exit
		    endif
		endif
	    else
		source $rts2dir/rts2.weatherWait
		tele domeoff
		set printoff=1
	    endif
# TEST for change to day, if yes purge queues if not done, 
#                         checkbias regardless of $domes
	    if ( $printoff != 0 ) then
		rts2-logcom "MODE: $sysmode, STATE: $systate"
		rts2-logcom "WAIT for state/mode change "`date +%H:%M:%S` 
		set printoff=0
	    endif
	    source $rts2dir/rts2.symodstat
	    if ( $oldstate != $systate ) then
		rts2-logcom "MODE: $sysmode, STATE: $systate"
		rts2-logcom "WAIT for state/mode change "`date +%H:%M:%S` 
		set oldstate=$systate
		sleep 60
		source $rts2dir/rts2.symodstat       # check for change to day
		if ( $state == 0 ) then
		    source $rts2dir/rts2.setrunlog 0
		    set qpurge=`cat /Realtime/lib/datadir`".QueuePurgeDONE"
		    if (!(-e $qpurge)) then
			source $rts2dir/rts2.purgecalibration # purge cal queue
			source $rts2dir/rts2.purgemanual      # purge man queue
			source $rts2dir/rts2.purgeservice     # purge serv queue
			/usr/bin/touch $qpurge
		    endif
		    source $rts2dir/rts2.checkbias
		    source $rts2dir/rts2.LN2fillWait # wait 15 min PM LN2 fill
		    if ( $focus_disabled == 0 ) then # run focus next time 
			setenv rts2_focusing_succ 0
			rts2-logcom "STATE: day, will run findfwhm"
		    endif
		    set firstnight=0
		    set printoff=1
		    tele domeoff
		else if ( $state == 5 ) then
		    source $rts2dir/rts2.LN2fillWait # wait 15 min AM LN2 fill
		endif
	    endif
	    set printoff=0
	else
	    set printoff=0
	    sleep 60
	    continue
	endif
    else                            # Go back to top of main loop
    	if ( $? == 0 && ( $sysmode == "ON" || $ignoreOFF == 1 ) ) then
	   set canopen=1
	else
	   rts2-logcom "Cannot open dome slit, need help\!"
	   continue
	endif
    endif
    set slit=`cat $slitfile`            # slit status, set to Open/Close
    set covers=`cat $coverfile`         # check mirror covers
    set state=`rts2-state -c` # set state = 0,1,2,3,4,5)
    set ignoreday=$ignoreDAY
    if ( $ignoreDAY == 1 ) then
        set slit=`cat $slitfile`
	set dosky1=1
	set dosky2=1
	set reftele=1
	set skipref=1
	set fixpoint=0
	set rundefoc=0
	setenv rts2_focusing_succ 1
	set state=3
	set startnight=0
    endif

    source $rts2dir/rts2.symodstat
    if ( $canopen == 0 && $state != 0 && $state != 5 ) then
       if ( $printoff != 0 ) then
	  rts2-logcom "Will not open dome slit 2"
	  set weather_reason=`$xmlrpc -G .bad_weather_reason`
	  if ( "$weather_reason" != "" ) then
	     rts2-logcom "$weather_reason"
	  endif
	  source $rts2dir/rts2.weatherWait
       endif
       sleep 60
       set printoff=0
       continue
    else
	if ( $state == 5 ) then
	    if ( $printoff != 0 ) then
		rts2-logcom "MODE: $sysmode, STATE: $systate"
		rts2-logcom "WAIT for state/mode change "`date`
	    endif
 	    sleep 60
	    set printoff=0
	    continue
	endif
    endif
    if ( $canopen != 0 && $sysmode == "OFF" ) then
       set canopen=0
       set printoff=0
    else
       if ($sysmode == "ON") then
	  set canopen=1
	  if ( $printoff == 1 ) then
	     rts2-logcom "MODE: $sysmode, STATE: $systate, can open"
	     set printoff=0
	  endif
       endif
    endif
    source $rts2dir/rts2.symodstat
    switch ($state)                              # STATES 0-5
	case 0:                                  # DAY
            set runfwhm=1
# try the above line to keep fwhm script running
# test that you can start without the run at night! 2/2/16 TG
            source $rts2dir/nrobot/rob_state_day
	    breaksw
	case 1:                                  # EVENING TWILIGHT
            source $rts2dir/nrobot/rob_state_etwilight
	    breaksw
	case 2:                                  # DUSK
            source $rts2dir/nrobot/rob_state_edusk
	    breaksw
        case 3:                                  # NIGHT
            source $rts2dir/nrobot/rob_state_night
	    breaksw
        case 4:                                  # DAWN
            source $rts2dir/nrobot/rob_state_dawn
	    continue
	case 5:                                  # MORNING
            source $rts2dir/nrobot/rob_state_morning
	    continue
	default:                                 # QUIT
	   source $rts2dir/rts2.symodstat
	   rts2-logcom "MODE: $sysmode, state $systate, QUIT"
	   exit
    endsw
end
