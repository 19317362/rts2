#!/usr/bin/tcsh
# start automatic observing. Uses rts2-seltest to select next target, find and
# execute its script, and waits until finished before picking a new target
# Version 13
# updated 03/11/11 EF: added skyfilt (currently g) and firstnight (run >1 night)
# updated 04/08/11 EF: added check of No. of dome flats
# updated 04/13/11 EF: added values set when ignoreDAY is set by -i flag
# Version 14
# updated 04/27/11 EF: improved checks of numobs, to account for restarts
# updated 05/04/11 EF: added report of target name in log for each exposure 
# updated 05/25/11 EF: fixed report of target name that caused failures 5/24,
#                      added test of numobs as digits not chars
# updated 05/27/11 EF: ensured covers open, tracking on for night state
# updated 07/01/11 EF: added checks for covers open/closed
# updated 07/02/11 EF: added graceful night state wait
# updated 08/08/11 EF: added startnight, covers to ignoreDAY tests to run
#                      in daytime...to be tested
# updated 08/10/11 EF: tweaked ignoreDAY tests, no dome motion, only track
# updated 08/30/11 EF: fixed not tracking after ref 
# updated 08/31/11 EF: removed prompt before domeflats in Ldomes
# Version 15
# updated 09/08/11 EF: added track, dome on after restart
#                      added rts2-logcom call in run_obs to report obs start
# updated 09/19/11 EF: PK added defoc_current flag
#                      added run/norun status check, if norun, run
# updated 10/05/11 EF: tweaked wait times again
# updated 10/26/11 PK: focusing script is run as target 3 from run_obs
# updated 10/31/11 EF: new sky flat waits now based on sun elevation
# updated 10/31/11 EF: made NO tele ref the default, -R now forces tele ref
# Version 16
# updated 11/16/11 PK: close telescope while in OFF state
# updated 11/16/11 EF: try dawn sky flats if fewer than 5 night flats
# updated 12/01/11 EF: added loop to ensure slit is open, quit after 15 attempts
# updated 12/05/11 EF: added domeinit at start
# updated 12/06/11 EF: added ref tele at the start of night
# updated 12/07/11 EF: added check of skyflats time of day
# updated 12/31/11 EF: added SKYFLAT1 and 2 for easier skyflat filter choice
# Version 17
# updated 01/15/12 PK: do domeflats if in standby
# updated 01/15/12 PK: print off message just once
# Version 18
# updated 02/24/12 EF: fixed startnight/firstnight for restart
# updated 02/24/12 EF: fixed tracking after restart
# Version 19
# updated 04/10/12 PK: better skyflat control
# update  04/21/12 EF: use new skyflat method for both eve and morn
# update  05/07/12 PK,EF: check state before tracking, if not, 2-4 stow
# Version 20
# updated 05/08/12 EF: added AM dome flats if none PM
# updated 05/17/12 EF: tweaked AM dome flat logic, now waits until fill-1hour
# Version 21
# updated 05/18/12 EF: made sure all "set x = y" use " = "
# updated 05/19/12 EF: finally sorted out logic for AM/PM domeflats?
# updated 06/11/12 PK: don't increase numobs if target was not run
# Version 22
# updated 06/25/12 EF: added -P flag to run FIXpoint
# updated 06/26/12 EF: "mode" is now ON/OFF/STANDBY to distinguish from "state"
# Version 23
# updated 09/11/12 EF: fixed various instances of Close/Closed, closing/opening
# updated 09/12/12 EF: added -O to get defocused images for collimation
# updated 09/14/12 EF: added DAWN check of skyflat time, AM or PM?
# updated 09/24/12 EF: added call to rts2.domeinit, based on Ted's script
# updated 09/25/12 EF: removed move to seg 01, per Ted
# Version 24
###############################################################################
# Copyright (C) 2010-2012 Emilio Falco (FLWO) & Petr Kubanek (Institute of Physics, Czech Republic)
###############################################################################
set ROBOVER = "V24"
set rts2dir = "/home/observer/RTS2-F"
set lastoffimage = -1
echo -1 -1 > $lasttarget
set tar_id = -2
set slitfile = "/Realtime/lib/slit_status"
set coverfile = "/Realtime/lib/cover_status"
alias run_obs 'source /home/observer/rts2-sys/bin/run_obs'
alias rts2-logcom 'source /home/observer/RTS2-F/rts2.logcom'
source /home/observer/rts2-sys/bin/rts2-f-env
$RTS2/bin/rts2-unabort
# also nunabort...
rts2-logcom "RTS2-F: START, script nabort command revoked"
/bin/rm -f /home/observer/RTS2-F/.NABORT
#  check status of RTS2-F
set rts2status = `ps auxw | grep rts2 | grep XMLRPC`
#echo ${%rts2status}
if ( ${%rts2status} == 0 ) then
    rts2-logcom "RTS2-F servers not running, starting them"
    source $rts2dir/rts2-start
    set rts2status = `ps auxw | grep rts2 | grep XMLRPC`
    if ( ${%rts2status} == 0 ) then
	echo "RTS2-F server PROBLEM, failed to start, QUIT"
	exit
    endif
endif

set ignoreDAY=0
setenv notmove 2
umask 022
# set firstnight to 1, in case RTS2-F will run multiple nights 
#     firstnight = 0 means NOT first night
set firstnight=1
# set ignoreOFF=0 to skip OFF mode check
set ignoreOFF=0
# set dosky to 0 until we can start skyflats at dusk:
set dosky1=0
# set dosky to 0 until we can start skyflats at dawn:
set dosky2=0
# setenv TTsky to 0 until time to take skyflats
setenv TTsky 0
# setenv TTdome to 0 in case it's too late for domeflats
setenv TTdome 0
# Python path needed for RTS2 modules
setenv PYTHONPATH /home/petr/rts2-sys/lib/python2.6/site-packages
# set slit to current status
set slit=`cat $slitfile`
# set covers to Closed until they are open
set covers="Closed"
# set domes to 0 until dome flats done, if no domes yet.
set HLOC=`/home/observer/RTS2-F/rts2.getMSThm -c -h`
if ($HLOC < 6) then
    set domflog=$rts2dir"/FLATS/domes-"`date -d yesterday +%y%m%d`
else 
    set domflog=$rts2dir"/FLATS/domes-"`date +%y%m%d`
endif
if ( -e $domflog ) then
    set nlog=`wc -l $domflog | awk '{print $1}'`
    if ( $nlog < 5 ) then
	rts2-logcom "DOMES: $domflog has $nlog entries, take a new set"
	set domes=0
    else
	rts2-logcom "DOMES: PM done"
	set domes=1
    endif
else
    rts2-logcom "DOMES: PM NOT done"
    set domes=0
endif
# print off message
set printoff=1
# we haven't yet run focusing...
setenv rts2_focusing_succ 0
# and we haven't yet change telescope focus
if ( ! (${?defoc_current}) ) set defoc_current = 0
# set flag to 1, skip tele ref unless -R:
set reftele=1
set skipref=1
# set flag to 0, skip astrometry pointing fix unless -P:
set fixpoint=0
# skip dodefoc images for collimation unless -O:
set rundefoc=0
# telescope was not stowed in the morning
set morningstow=1
# NOTE THESE VARIABLES:
#  startnight=0 if not starting a new run this night (log with >0 obs exists)
#  startnight=1 if starting a new run this night (no log, or 0 obs in log)
#  firstnight=0 means night >1 of a run over multiple nights
#  firstnight=1 means the first night of a possible multiple-night run

# set empty name for alternative domeflat list
set domefile = "$rts2dir/FLATS/DOMEFILT"
# check flags first
while ( "x$1" != "x" )
    switch ($1)
	case "-O":
	    set ignoreOFF = 1
	    rts2-logcom "IGNORE OFF mode: TESTING"
	    breaksw
	case "-i":
	    set ignoreDAY = 1
	    rts2-logcom "IGNORE DAY FLAG ON: TESTING"
	    breaksw
	case "-s":
	    set slit="Open"
	    rts2-logcom "-s flag: set slit flag to Open"
	    breaksw
        case "-T":
            setenv notmove 1
	    rts2-logcom "-T flag: setenv notmove flag to 1"
            breaksw
	case "-e":
	    set dosky1=1
	    rts2-logcom "-e flag: Skip evening skyflats"
	    breaksw
	case "-m":
	    set dosky2=1
	    rts2-logcom "-m flag: Skip morning skyflats"
	    breaksw
	case "-F":
	    setenv rts2_focusing_succ 1
	    rts2-logcom "-F flag: Skip focusing"
	    breaksw
	case "-D":
	    set domes=1
	    rts2-logcom "-D flag: Skip domeflats"
	    breaksw
	case "-d":
	    rts2-logcom "-d flag: use alternative domeflats file ALTFILT"
	    set domefile="$rts2dir/FLATS/ALTFILT"
	    breaksw
	case "-R":
	    set skipref=1
	    set reftele=0
	    rts2-logcom "-R flag: run tele ref"
	    breaksw
	case "-P":
	    set fixpoint=1
	    rts2-logcom "-P flag: run astrometry pointing fix"
	    breaksw
	case "-E":
	    set rundefoc=1
	    rts2-logcom "-E flag: get +-200 defocused images for collimation"
	    breaksw
	case "-h":
	    echo "---- Available ROBOT flags:"
	    #echo "     -c Reset exposure counter for this run to 0"
	    #echo "     -s Set slit state to open"
	    echo "     -D Skip dome flats"
	    echo "     -d Use alternative dome flats list:"
	    echo "        $rts2dir/FLATS/ALTFILT"
	    echo "     -e Skip evening sky flats"
	    echo "     -m Skip morning sky flats"
	    echo "     -R RUN tele reference (default is SKIP)"
	    echo "     -F Skip focus run"
	    echo "     -P FIX pointing with astrometry (default is SKIP)"
	    echo "     -E get 2 defocused images for collimation (default is SKIP)"
	    exit 1
	default:
	    rts2-logcom "$1 flag: not recognized, sorry."
	    rts2-logcom "QUIT"
	    exit 0
    endsw
    shift
end

# set runlog name: current run log in case of a restart 
source $rts2dir/rts2.setrunlog
if ( -e $runlog ) then
    set numobs = `grep "Target:" $runlog | tail -1 | awk '{print $5}'`
    set testn = `echo $numobs | awk '{isn = /[0-9]/; print isn}'`
    if ( $testn < 1 ) then
	rts2-logcom "No observations found in $runlog"
	set numobs=0
	set startnight=1
    else
	if ( ${%numobs} > 0 ) then
    # there were obs entries in the last log present, NOT new night
	    set startnight=0
	else
	# there were NO obs entries in the last log present, new night
	    set startnight=1
	endif
    endif
else
# no log present for this run, so new night
    rts2-logcom "Log $runlog NOT present yet"
    set startnight=1
    set numobs=0
endif

# welcome message
if ( $startnight == 1 ) then
    rts2-logcom ">>>> START RTS2-F $ROBOVER robot observations <<<<"
else
    rts2-logcom ">>>> CONTINUE RTS2-F $ROBOVER robot observations <<<<"
    if ( $ignoreDAY ) then
	rts2-logcom "---RTS2-F: TESTING, track ON, dome OFF" 
	tele trackon
	tele domeoff
    else
    	set state = `rts2-state -c`
# NEW, translate state numbers to names, into systate
	source $rts2dir/rts2.systate
# night state?
	if ( $state == 3 ) then
	    set ms1=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state off`
	    set ms2=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state standby`
	    if ( ($ms1 == 0) && ($ms2 == 0) ) then
		rts2-logcom "---RTS2-F: STATE $systate, MODE ON"
# make sure we're tracking, dome on  
		rts2-logcom "---RTS2-F: turn track, dome ON"
		tele trackon
		tele domeon
	    endif
# state is 0 (day) or 5 (morn)
	else if ( ($state == 0) || ($state == 5) ) then
	    rts2-logcom "---RTS2-F: STATE $systate, track OFF, dome OFF"
	    tele stow 
	    tele domeoff
	endif
    endif
endif

# run forever, or until CTRL-C or jump to exit
while (1 != 0)
    set state=`rts2-state -c`
# NEW, translate state numbers to names, into systate
    source $rts2dir/rts2.systate
#    if ( $printoff != 0 ) then
#	rts2-logcom "---RTS2-F state: $systate"
#    endif
    if ( $firstnight == 0 && $startnight == 1 && $printoff != 0 ) then
	rts2-logcom ">>>> MAIN LOOP: CONTINUE RTS2-F $ROBOVER observations <<<<"
	source $rts2dir/rts2.domeflattimeWait
#    rts2-logcom "---------TEST: back from dome flat wait"
# set runlog name: current run log 
	source $rts2dir/rts2.setrunlog
	set numobs=0
	set dosky1=0
	set dosky2=0
	set printoff=0
    endif
    if ( -e $rts2abort ) then
	rts2-logcom "STOProbot at top of RTS2-F loop"
	exit
    endif
    set canopen=0
    set ms=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state on`
    if ( $? != 0 || ( $ms == 0 && $ignoreOFF == 0 ) ) then
	if ( $? != 0 ) then
	    rts2-logcom "---RTS2-F mode: unknown"
	else
	    set ms=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state standby`
	    if  ( $printoff != 0 ) then
		if ( $ms == 0 ) then
		    rts2-logcom "---RTS2-F mode: OFF, state: $systate"
		else
		    rts2-logcom "---RTS2-F mode: STANDBY, state: $systate"
		endif
		set printoff=0
	    endif
	endif
	set slit=`cat $slitfile`
	if ( $slit == "Open" ) then
	   if ( $tar_id == -2 ) then
	       rts2-logcom "   Dome slit is open\!"
	       rts2-logcom "   CTRL-C to prevent closing dome slit"
	       set count=15
	       echo -n "Dome will close in $count seconds..."
	       while ( $count > 0 )
	   	  sleep 1
	   	  @ count--
	   	  echo -n "$count "
	       end
	       echo " "
	   endif
	   rts2-logcom "---RTS2-F mode: NOT ON but slit is open"
	   rts2-logcom "   shut down now"
	   source $rts2dir/rts2.shutall
	   set morningstow=0
	endif
	set ms=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state off`
        if ( ( $? != 0 || ($ms == 0 && $ignoreOFF == 0) ) && !($TTdome) ) then
	    if ( $printoff != 0 ) then
		rts2-logcom "WEATHER may be bad, check GOweather"
		rts2-logcom "OR Switch mode to ON to observe, use GOweather"
		rts2-logcom "CTRL-C to exit the robot"
		set printoff = 0
	    endif
	    if ( $domes == 0 ) then
		source $rts2dir/rts2.domeflattimeWait
#	rts2-logcom "---------TEST: back from dome flat wait"
	    else
	        sleep 60
		set ms1=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state off`
		set ms2=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state standby`
		if ( ($ms1 == 0) && ($ms2 == 0) && ($printoff != 0) ) then
		    rts2-logcom "---RTS2-F mode: ON"
		    set printoff=0
		endif
	    endif
	    continue
	else
# 09/23/12 EF: set printoff to 0 to prevent TOO many "CONTINUE" messages in log
	    set printoff=0
	endif
#	continue
    else
    	if ( $? == 0 && ( $ms == 1 || $ignoreOFF == 1 ) ) then
	   set canopen=1
	   set printoff=1
	else
	   rts2-logcom "Cannot open slit, need help\!"
	endif
    endif

# check the slit status, set slit to Open/Close
    set slit=`cat $slitfile`
# check mirror covers
    set covers=`cat $coverfile`
# set state (day, evening, dusk, night, dawn, morning = 0,1,2,3,4,5)
    set state=`rts2-state -c`
    set ignoreday = $ignoreDAY
    if ( $ignoreDAY == 1 ) then
        set slit=`cat $slitfile`
	set dosky1=1
	set dosky2=1
	set reftele=1
	set skipref=1
	set fixpoint=0
	set rundefoc=0
	setenv rts2_focusing_succ 1
	set state=3
	set startnight=0
    endif

    if ( $canopen == 0 && ( $state == 1 || $state == 2 || $state == 3 || $state == 4 ) ) then
       if ( $printoff != 0 ) then
		rts2-logcom "STANDBY mode, will not open slit"
		rts2-logcom "WEATHER may be bad, check GOweather"
		rts2-logcom "Switch to ON to observe, use GOweather"
		rts2-logcom "CTRL-C to exit the robot"
		rts2-logcom "WAIT for state change at " `date +%H:%M:%S`" MST" 
		set printoff=0
       endif
       sleep 60
       continue
    else if ( $canopen != 0 ) then
       set ms1=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state off`
       set ms2=`$RTS2/bin/rts2-xmlrpcclient --config $XMLRPCCON --master-state standby`
       if ( ($ms1 == 0) && ($ms2 == 0) && ($printoff != 0) ) then
#	  rts2-logcom "---RTS2-F mode: ON"
	  set canopen=1
       else if ( $ms1 != 0 && ($printoff != 0) ) then
	  rts2-logcom "---RTS2-F mode: OFF, state: $systate"
	  set canopen=0
       endif
       set printoff=0
    endif
#---------------------------------- STATES 0-5 --------------------------
    switch ($state)
# DAY
	case 0:
#	    rts2-logcom "---RTS2-F state: day"
	    set HLOC = `/home/observer/RTS2-F/rts2.getMSThm -c -h`
	    set domflog = $rts2dir"/FLATS/domes-"`date +%y%m%d`
	    if ( -e $domflog ) then
		set nlog = `wc -l $domflog | awk '{print $1}'`
		if ( $nlog < 5 ) then
		    rts2-logcom "DOMES: $domflog has $nlog entries, take a new set"
		    set domes = 0
		else
		    rts2-logcom "DOMES: PM done"
		    set domes = 1
		endif
	    else
		set domes = 0
	    endif
# take domeflats if needed
	    if ( $domes == 0 ) then
# calculate how long until domeflats, if necessary: 
		if ( !($TTdome) ) then
		    source $rts2dir/rts2.domeflattimeWait
#	rts2-logcom "---------TEST: back from dome flat wait"
		endif
		if ($TTdome) then
#  run domeflats script that uses a list of biases and flats
		    source $rts2dir/rts2.domeflats-list $domefile
		    set domes = 1
		    setenv TTdome 0
		else
		    rts2-logcom "DOMES: Missed PM period"
		    if ( -e $rts2abort ) then
			rts2-logcom "STOProbot called"
			exit
		    endif
		endif
	    endif
	    rts2-logcom "Wait until we can open (evening twilight)"
# wait gracefully for state change:
	    source $rts2dir/rts2.twilighttimeWait
 	    if ( -e $rts2abort ) then
		rts2-logcom "STOProbot called"
		exit
	    endif
#	    set state = 1
# another case of MAIN LOOP repeats, set printoff=0
	    set printoff=0
	    breaksw
# EVENING TWILIGHT
	case 1:
	    rts2-logcom "---RTS2-F state: evening twilight"
	    if ($slit != "Open") then
		rts2-logcom "Twilight - opening slit"
		if ( -e $rts2abort ) then
		    rts2-logcom "STOProbot called"
		    exit
		endif
		openslit
		set slitstatus=`cat $slitfile`
		set slit=$slitstatus
		if ($slitstatus == "Open") then
# wait for state change to dusk:
		    while ($state == 1)
			if ( -e $rts2abort ) then
			    rts2-logcom "STOProbot called"
			    exit
			endif
			source $rts2dir/rts2.dusktimeWait
			set state = 2
		    end
		else
		    set count=0
		    while ($slitstatus != "Open" && $count < 15)
			rts2-logcom "SLIT: $slitstatus, reattempt, sleep 1 min..."
			@ count++
			sleep 60
			openslit
			set slitstatus=`cat $slitfile`
			set slit=$slitstatus
		    end
		    if ($count > 14 && $slitstatus != "Open") then
			rts2-logcom "PROBLEM, SLIT STATUS: $slitstatus. QUIT"
			exit
		    endif
		endif
	    else
		rts2-logcom "Twilight -- SLIT: $slit -- CTRL-C exits"
# wait for state change to dusk:
		while ($state == 1 && $printoff != 0)
		   if ( -e $rts2abort ) then
		      rts2-logcom "STOProbot called"
		      exit
		   endif
		   source $rts2dir/rts2.dusktimeWait
		   set printoff=0
		   set state=2
		end
	    endif
	    breaksw
# DUSK
	case 2:
	   rts2-logcom "---RTS2-F state: dusk"
#       check to see if u skyflats have been done already, skip if done:
  	   set skyflog = $rts2dir"/FLATS/skies-"`date +%y%m%d`
	   if ( -e $skyflog ) then
#       check time of day, if early, need PM skyflats
		set timoday = `date -r $skyflog +%H`
		if ($timoday > 12) then
		    set nlog = `grep -c "next u" $skyflog`
		    if ($nlog > 4) then
			rts2-logcom "SKYFLATS: done for today PM"
			set dosky1 = 1
		    else
			rts2-logcom "SKYFLATS: need more for today PM"
			set dosky1 = 0
		    endif
		else
		    rts2-logcom "SKYFLATS: NOT done for today PM"
		    set dosky1 = 0
		endif
	   endif

#	check time until skyflat time
	   if ($dosky1 == 0) then
	      source $rts2dir/rts2.skyflattime
	      if ( $TTsky == -1 ) then # too late for flats
		 set dosky1 = 1
		 setenv TTsky 0
		 continue
	      endif
	      if (!($TTsky)) then
#		 rts2-logcom "SKYFLAT: wait for it -- CTRL-C exits"
		 if ( -e $rts2abort ) then
		    rts2-logcom "STOProbot called"
		    exit
		 endif
#		 sleep 60
		 source $rts2dir/rts2.skyflattime
		 continue
	      endif
	   endif
# time for skyflats has arrived if TTsky is 1:
	   if ($TTsky) then
# 		...get telescope ready
	      if ($slit != "Open") then
	         rts2-logcom "SKYFLAT: slit CLOSED, OPEN it\!"
		 openslit
		 set slit=`cat $slitfile`
		 if ($slit != "Open") then
		    rts2-logcom "SLIT DID NOT OPEN, QUIT"
		    exit
		 endif
	      endif
	      rts2-logcom "SKYFLAT: open covers."
	      source $rts2dir/rts2.covers OPEN
	      set covers = `cat $coverfile`
# turn track on
#	      rts2-logcom "SKYFLAT: turn tracking, dome ON, seg 1."
	      rts2-logcom "SKYFLAT: turn tracking, dome ON."
	      tele trackon
	      tele domeon
#	      tele seg 1
	      tempfocus
	      rts2-logcom "SKYFLAT: take exposures..."
	      if ( -e $rts2abort ) then
		 rts2-logcom "STOProbot called"
		 exit
	      endif
# SKYFILT_X have filter, initial exposure
	      foreach skyline ( "`cat $rts2dir/FLATS/SKYFILT_E`" )
	         set sky_filter = `echo $skyline | cut -d' ' -f1`
		 set sky_time = `echo $skyline | cut -d' ' -f2`
	      	 source $rts2dir/rts2.skyflats $sky_filter $sky_time
	         set skyflatstat=$status
# 
		 if ($skyflatstat == 0) then
                    break
		 endif
   	         if ( -e $rts2abort ) then
		    rts2-logcom "STOProbot called"
		    exit
	         endif
	      end
	      if ($skyflatstat == 0) then
		rts2-logcom "SKYFLAT: FAILED, try AM"
		set dosky1=0
	      else
		rts2-logcom "SKYFLAT: done"
		set dosky1=1
	      endif
# 		...stow tele at end
	      rts2-logcom "SKYFLAT: stow tel"
	      tele stow
	      setenv TTsky 0
	   endif
# reference the tel, if -R flag SET and skyflats done or too late for them
	   if ($reftele  == 0) then
	      rts2-logcom "Reference telescope"
	      tele stow
	      tele ref
	      set reftele = 1
#	      rts2-logcom "---RTS2-F: after ref, turn tracking, dome ON, seg 1." 
	      rts2-logcom "---RTS2-F: after ref, turn tracking, dome ON." 
	      tele trackon
	      tele domeon
#	      tele seg 1
	   else
	      if ($skipref == 1) then
		 rts2-logcom "SKIP reference telescope"
	      endif
	   endif
# wait gracefully for state change:
	   source $rts2dir/rts2.nighttimeWait
 	   if ( -e $rts2abort ) then
	       rts2-logcom "STOProbot called"
	       exit
	   endif
	   breaksw
# NIGHT
        case 3:
# reference the tel, if -R flag SET, do this before anything else.
	   if ($reftele  == 0) then
	      rts2-logcom "Reference telescope"
	      tele stow
	      tele ref
	      set reftele = 1
	      rts2-logcom "---RTS2-F: reference telescope finished" 
	   endif
# check slit & covers status first
	   if ($slit != "Open") then
	      rts2-logcom "---RTS2-F state: night, slit CLOSED, OPEN it\!"
	      openslit
	      set slit=`cat $slitfile`
	      if ($slit != "Open") then
		 rts2-logcom "SLIT DID NOT OPEN, QUIT"
		 exit 
	      endif
	   endif
	   if ($covers != "Open") then
	      tele stow
	      source $rts2dir/rts2.covers OPEN
	      set covers=`cat $coverfile`
	      rts2-logcom "---RTS2-F: init dome if needed" 
# call rts2.domeinit to avoid init if already done
	      source $rts2dir/rts2.domeinit
#	      tele domeinit
# start tracking after opening covers
  	      rts2-logcom "---RTS2-F: turn track, dome ON" 
	      tele trackon
	      tele domeon
	   endif

# check whether first observation, or continuing
#  startnight is set to 0 when testing (ignoreDAY = 1)
	   if ( $startnight == 1 ) then
	      rts2-logcom "---RTS2-F: start night observations"
# reset startnight to 0, as we'll take observations after domes, skies, 
#                           ref tele and focus.
	      set startnight = 0
# open covers if needed
	      set covers=`cat $coverfile`
	      if ($covers != "Open") then
		 tele stow
		 rts2-logcom "---RTS2-F: OPEN covers..."
		 source $rts2dir/rts2.covers OPEN
		 set covers=`cat $coverfile`
	      endif
# added 12/05/11, init dome:
	      rts2-logcom "---RTS2-F: init dome if needed" 
	      source $rts2dir/rts2.domeinit
#	      tele domeinit
	      rts2-logcom "---RTS2-F: turn track, dome ON" 
	      tele trackon
	      tele domeon
#	      tele seg 1
	      tempfocus
	   else
#             open covers if NOT testing	      
	      if ( $ignoreDAY ) then
		 set covers="Closed"
	      else 
		 set covers=`cat $coverfile`
	      endif
	      if ( $covers != "Open" ) then
		 source $rts2dir/rts2.covers OPEN
		 set covers=`cat $coverfile`
# added 12/05/11, init dome:
		 rts2-logcom "---RTS2-F: init dome if needed" 
		 source $rts2dir/rts2.domeinit
#		 tele domeinit
  	         rts2-logcom "---RTS2-F: turn tracking, dome ON" 
	         tele trackon
	         tele domeon
		 tempfocus
	      endif
	      if ( $covers != "Open" ) then
		 rts2-logcom "COVERS DID NOT OPEN, QUIT"
		 exit 
	      endif
#	      rts2-logcom "---RTS2-F: turn tracking, dome ON" 
#	      tele trackon
#	      tele domeon
	   endif
# reset TTsky, to allow for morning skyflats
	   setenv TTsky 0
	   if ( -e $rts2abort ) then
		 rts2-logcom "STOProbot called"
		 exit
	   endif
# FIX pointing, if -P flag SET:
	   if ($fixpoint == 1) then
	      rts2-logcom "FIX pointing."
	      source $rts2dir/rts2.matchwcs
	      set fixpoint=0
	      rts2-logcom "---RTS2-F: finished FIXpoint" 
	   endif
# GET defocused images, if -E flag SET:
	   if ($rundefoc == 1) then
	      rts2-logcom "GET 2 defocused images for collimation"
	      source $rts2dir/rts2.dodefoc
	      set rundefoc=0
	      rts2-logcom "---RTS2-F: got 2 defoc images" 
	   endif
	   if ( -e $rts2abort ) then
		 rts2-logcom "STOProbot called"
		 exit
	   endif
	   # run_obs $target
	   run_obs
	   breaksw
# DAWN
        case 4:
#     check to see if skyflats were done PM, skip if done:
  	   set skyflog = $rts2dir"/FLATS/skies-"`date -d yesterday +%y%m%d`
	   if ( -e $skyflog ) then
#             skyflats really done PM?
#       check time of day for skyflog, if <=12, need AM skyflats
	      set timoday = `date -r $skyflog +%H`
	      if ($timoday > 12) then
		 set skyline = `cat $rts2dir/FLATS/SKYFILT_M`
		 set sky_filter = `echo $skyline | cut -d' ' -f1`
		 set nlog = `grep -c "next u" $skyflog`
		 if ($nlog > 4) then
		    rts2-logcom "SKYFLATS: done for today AM"
		    set dosky2 = 1
		 else
		    rts2-logcom "SKYFLATS: need more for today AM"
		    set dosky2 = 0
		 endif
	      else
		 rts2-logcom "SKYFLATS: NOT done for today AM"
		 set dosky2=0
	      endif
	   else
		 rts2-logcom "SKYFLATS: NOT done for today"
		 set dosky2=0
	   endif

	   if ($dosky2 == 0) then
	      rts2-logcom "---RTS2-F state: dawn, attempt AM skyflats."
	      source $rts2dir/rts2.skyflattime
	      if ( $TTsky == -1 ) then # too late for flats
		 set dosky2 = 1
		 setenv TTsky 0
		 breaksw
	      endif
	      if (!($TTsky)) then
#		 rts2-logcom "SKYFLAT: wait for it. CTRL-C exits."
		 if ( -e $rts2abort ) then
		    rts2-logcom "STOProbot called"
		    exit
		 endif
#		 sleep 60
		 source $rts2dir/rts2.skyflattime
		 continue
	      endif
	   else
	      rts2-logcom "---RTS2-F state: dawn, no need for AM skyflats"
	   endif

	   if ($TTsky) then
# 	     ...telescope should be ready to go at this point
	      if ($slit != "Open") then
		 rts2-logcom "SKYFLAT: slit CLOSED, OPEN it\!"
		 openslit
	 # check again??
		 set slit=`cat $slitfile`
		 if ($slit != "Open") then
		    rts2-logcom "SLIT STILL CLOSED, QUIT"
		    exit
	         endif
	      endif
	      set covers = `cat $coverfile`
	      if ( $covers != "Open" ) then
		 source $rts2dir/rts2.covers OPEN
		 set covers = `cat $coverfile`
	      endif
	      if ( $covers != "Open" ) then
		 rts2-logcom "COVERS: DID NOT OPEN, QUIT"
		 exit 
	      endif
# make sure we're tracking
	      if ( $ignoreDAY == 0) then
#		rts2-logcom "---RTS2-F: dawn, turn tracking, dome ON, seg 1." 
		rts2-logcom "---RTS2-F: dawn, turn tracking, dome ON" 
		tele trackon
		tele domeon
#		tele seg 1
	      endif
#	try SKYFILT_M file
	      foreach skyline ( "`cat $rts2dir/FLATS/SKYFILT_M`" )
	         set sky_filter = `echo $skyline | cut -d' ' -f1`
		 set sky_time = `echo $skyline | cut -d' ' -f2`
	      	 source $rts2dir/rts2.skyflats $sky_filter $sky_time
	         set skyflatstat = $status
# 
		 if ($skyflatstat == 0) then
		    rts2-logcom "SKYFLAT: bad status, SKIP"
                    break
		 endif
   	         if ( -e $rts2abort ) then
		    rts2-logcom "STOProbot called"
		    exit
	         endif
	      end
	      setenv TTsky 0
	      set dosky2 = 1
	   endif
# stow tele, close covers if skyflats done or too late for them
	   source $rts2dir/rts2.shutall
	   set morningstow = 0
# check for presence of domeflats from last night
  	   set domflog = $rts2dir"/FLATS/domes-"`date -d yesterday +%y%m%d`
	   if ( -e $domflog ) then
	      set nlog = `wc -l $domflog | awk '{print $1}'`
	      if ( $nlog < 5 ) then
		   rts2-logcom "DOMES: $domflog has only $nlog entries"
		   set domes=0
	      else
		   rts2-logcom "DOMES: PM done, skip AM"
		   set domes=1
	      endif
	   else
	      rts2-logcom "DOMES: AM and PM missing, take AM"
	      set domes=0
	   endif
	   if ( $domes == 0 ) then
# calculate whether there is enough time for AM domeflats 
#  wait until about 60 min after skyflats:
	       source $rts2dir/rts2.domeflattimeWait
#	rts2-logcom "---------TEST: back from dome flat wait"
	       if ( $TTdome ) then
#  run domeflats script that uses a list of biases and flats
		   source $rts2dir/rts2.domeflats-list $domefile
		   set domes=1
		   setenv TTdome 0
	       else
		   rts2-logcom "DOMES: Missed AM period"
		   if ( -e $rts2abort ) then
		       rts2-logcom "STOProbot called"
		       exit
		   endif
	       endif
	   endif
# current MST hours, minutes
	   set HLOC=`/home/observer/RTS2-F/rts2.getMSThm -c -h`
	   set MLOC=`/home/observer/RTS2-F/rts2.getMSThm -c -m`
	   rts2-logcom ">>>> Finishing observations at $HLOC $MLOC <<<<"
# wait until 15 min after AM LN2 fill
	   source $rts2dir/rts2.LN2fillWait
# set firstnight = 0 to allow robot to run another night
	   set firstnight=0
	   set startnight=1
	   set domes=0
	   set printoff=1
#	   rts2-logcom "---RTS2-F: RESET dome flag to 0, allow a new set"
	   breaksw
#	   exit
	case 5:
	   if ( $morningstow == 1 ) then
	     rts2-logcom "---RTS2-F morning, stowing tel, sleep"
	      set covers = `cat $coverfile`
	      if ( $covers == "Open" ) then
		 tele stow
		 source $rts2dir/rts2.covers CLOSE
		 set covers = `cat $coverfile`
	      endif
	      if ( $covers != "Closed" ) then
		 rts2-logcom "COVERS: STILL OPEN, need help"
	      endif
	     set slit=`cat $slitfile`
	     if ($slit == "Open") then
		closeslit
	 # check again??
		if ($slit != "Close") then
		    rts2-logcom "SLIT: STILL OPEN, need help"
	         endif
	     endif
	     set morningstow=0
           endif
	   set printoff=1
	   continue
	default:
	   rts2-logcom "---RTS2-F unknown state $state, QUIT"
	   exit
    endsw
end
