// based on autogenerated Thrift skeleton

#include <pthread.h>
#include "device.h"

#include "MountService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::rts2;

// RTS2 thrift service..
class ThriftD: public rts2core::Device
{
	public:
		ThriftD (int argc, char **argv);
};

ThriftD::ThriftD (int argc, char **argv): rts2core::Device (argc, argv, DEVICE_TYPE_THRIFT, "THRIFT")
{
}

ThriftD *rts2Device;

void *rts2_thread (void *args)
{
	rts2Device->run ();
	return NULL;
}

class MountServiceHandler : virtual public MountServiceIf {
 public:
  MountServiceHandler() {
    // Your initialization goes here
  }

  void info(MountInfo& _return) {
    // Your implementation goes here
    printf("info\n");
  }

  int32_t Slew(const RaDec& target) {
    // Your implementation goes here
    printf("Slew\n");
    return 0;
  }

};

void *thrift_thread (void *args)
{
  int port = 9090;
  shared_ptr<MountServiceHandler> handler(new MountServiceHandler());
  shared_ptr<TProcessor> processor(new MountServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return NULL;
}

int main (int argc, char **argv)
{
  rts2Device = new ThriftD (argc, argv);
 
  pthread_t thrift_thr;
  pthread_attr_t attr;

  pthread_t rts2_thr;

  pthread_create (&rts2_thr, NULL, &rts2_thread, NULL);
  pthread_create (&thrift_thr, NULL, &thrift_thread, NULL);

  pthread_join (thrift_thr, NULL);
  pthread_join (rts2_thr, NULL);
  return 0;
}
