#!/bin/bash

# Configuration file read routines.
# Copyright (C) 2003-2010 Petr Kubanek <petr@kubanek.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

doinit=1

INITDIR=.

while [ "x$1" != "x" ]; do
  case $1 in
    -h)
      cat << EOF
Build RTS2 PostgreSQL database. Options:
  -h .. this help
  -d .. directory with initialization files
  -I .. do not fill database with initialization data
  -T .. do not fill database with standard targets 
Options must be folowed by name of created database. You can create database with createdb tool. Please be aware that if you select to not fill database with initialization data, some of the RTS2 functionalities will be broken. Particularly specifiin -I will result in empty types table, which means that you will be unable to create any new target before you create entry for its type. Please use -T and -I options only when you are sure you know what they do.
EOF
      exit 1
      ;;
    -d)
      INITDIR=$2
      shift
      ;;
    -T)
      doinit=2
      ;;
    -I)
      doinit=0
      ;;
    *)
      if [ "x$DBNAME" != "x" ]; then
        echo "You can specify only one DB to create."
        exit 1
      fi
      DBNAME=$1
      ;;
  esac
  shift
done

# check that we are run properly
if [ ! -e $INITDIR/data -a ! -e $INITDIR/data/init.sql ]; then
  echo "You are most probably running rts2-builddb from wrong directory."
  echo "Either cd to directory with rts2-builddb, or specify path to init files with -d argument"
fi

# process arguments..

PSQL=psql

PSQLDB="$PSQL $DBNAME"

if [ "x$DBNAME" == "x" ]; then
  echo "Usage: $0 <db_name>"
  exit 1
fi

LOGFILE="build_$DBNAME.log"

rm -f $LOGFILE

echo "Logs generated in $LOGFILE"

function run_psql
{
  echo -n $1 " ."
  echo "running $PSQLDB < $2" >> $LOGFILE
  $PSQLDB --echo-all 2>> $LOGFILE < $2|while read x; do echo -n "."; done
  echo " OK"
}

$PSQLDB -c "select * from pg_tables" 2>&1 >/dev/null
if [ $? != 0 ]; then
  echo "Cannot execute psql / you don't have access to database '$DBNAME'"
  exit 2
fi

# build database

run_psql "creating required SQL languages" $INITDIR/create/language.sql
run_psql "creating wcs type" $INITDIR/create/typ_wcs.sql
run_psql "creating wcs2 type" $INITDIR/create/typ_wcs2.sql
run_psql "creating functions" $INITDIR/create/functions.sql
run_psql "creating tables" $INITDIR/create/tables.sql
run_psql "creating views" $INITDIR/create/views.sql

# update to current version

cd $INITDIR/update

for x in rel_*.sql; do
	echo Applying updates to relase $x
	run_psql "updating to `echo $x | sed 's/.sql$//'`" $x
done

cd ..

# load init data
if [ $doinit != 0 ]; then
  run_psql "creating standard entries (target types,..)" $INITDIR/data/init.sql

  if [ $doinit != 2 ]; then
    run_psql "creating standard targets" $INITDIR/data/targets.sql
  fi
  # if asked, load Landoldts and planets
  echo -n "Would you like to create Landolt calibration fields targets [Y|n]?"
  read repl

  if [ "x$repl" = 'xY' -o "x$repl" = 'xy' -o "x$repl" = 'x' ]; then
    run_psql "creating Landold skyflats targets" $INITDIR/data/landolt.sql
  else
    echo "Landolt fields targets skipped."
  fi

  echo -n "Would you like to create targets for planets [Y|n]?"
  read repl
  if [ "x$repl" = 'xY' -o "x$repl" = 'xy' -o "x$repl" = 'x' ]; then
    run_psql "creating planets targets" $INITDIR/data/planets.sql
  else
    echo "Planet targets skipped."
  fi
fi

# grant rights
run_psql "Granting database rights" $INITDIR/grant.sql

cat << EOF

Database $DBNAME created. Please examine $LOGFILE if something in RTS2 does not work.

You can now access database through RTS2 commands, or with psql $DBNAME.

EOF

if [ $doinit != 1 ]; then
  echo "Some of the initialization was skipped. Brave for consequences, or rerun without -T or -I options."
fi
