#!/usr/bin/env python

import subprocess
import unittest
import os
import select


class FLATStest(unittest.TestCase):

    def __check_lines(self, lines, write=None):
        try:
            for l in lines:
                ls = self.flatS.stdout.readline().rstrip()
                print('>{0}'.format(ls))
                self.assertEqual(ls, l)
            if write is not None:
                self.flatS.stdin.write(write + '\n')
                print('<{0}'.format(write))
        except AssertionError as ex:
            pr = self.poll.poll(1000)
            for (fd, event) in pr:
                if event & select.POLLIN == 0:
                    continue
                print(os.read(fd, 30000))
            raise ex

    def setUp(self):
        self.env = os.environ.copy()
        try:
            self.env['PYTHONPATH'] = os.environ['PYTHONPATH'] + ':../python'
        except KeyError:
            self.env['PYTHONPATH'] = '../python'
        print('PYTHONPATH=', self.env['PYTHONPATH'])
        self.poll = select.poll()

    def testSunset(self):
        self.flatS = subprocess.Popen(
            ['../scripts/flat.py'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            env=self.env,
            universal_newlines=True
        )
        self.poll.register(self.flatS.stdout, select.POLLIN)
        self.poll.register(self.flatS.stderr, select.POLLIN)
        self.__check_lines(['G centrald sun_az'], '20')
        self.__check_lines(['run_device'], 'CXX')
        self.__check_lines(
            [
                'value SHUTTER = LIGHT',
                'value filter = i',
                'value binning = 1',
                'value exposure = 5',
                'value SHUTTER = LIGHT',
                'exposure'
            ],
            'exposure_end'
        )
        self.__check_lines(
            [
                'VT TELESCOPE OFFS += 0.00277777777778 0.00277777777778'
            ],
            'image /tmp/flat1.fits'
        )
        self.__check_lines(
            [
                '? average'
            ],
            '45000'
        )
        self.__check_lines(
            [
                'delete /tmp/flat1.fits',
                'log I CXX run ratio 2.03479056992 avrg 45000.0 ngood 0'
                ' filter i next exptime 5 ret bright',
                'value exposure = 5',
                'value SHUTTER = LIGHT',
                'exposure'
            ]
        )
        self.flatS.terminate()


unittest.main()
